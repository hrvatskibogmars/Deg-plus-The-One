/* BORDER RADIUS */
/*------------------------
	Bounds
------------------------*/
/*------------------------
	Range definitions
------------------------*/
/*--------------------------------
	Media Query range templates
---------------------------------*/
/*------------------------
	Media Queries
------------------------*/
/* TRANSFORM  */
html, body, input, button {
  -webkit-text-size-adjust: none;
  -webkit-font-smoothing: antialiased;
  text-rendering: optimizeLegibility; }

body, h1, h2, h3, h4, h5, h6, ul, ol, p, hr, form {
  margin: 0;
  padding: 0;
  border: none; }

/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure,
footer, header, hgroup, menu, nav, section {
  display: block; }

hr {
  float: left;
  width: 100%;
  height: 1px; }

ul, ol {
  list-style: none; }

::-moz-selection {
  background: #000000;
  color: #ffffff; }

::selection {
  background: #000000;
  color: #ffffff; }

::-moz-selection {
  background: #000000;
  color: #ffffff; }

input {
  width: auto; }

input[type="text"],
input[type="password"],
input[type="email"],
input[type="search"],
textarea {
  width: 100%;
  float: left;
  margin: 0;
  padding: 0;
  border: none;
  box-sizing: border-box;
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box; }

textarea {
  resize: vertical; }

input:focus, textarea:focus, select:focus {
  outline: none; }

figure {
  padding: 0;
  margin: 0; }

fieldset {
  border: none;
  padding: 0;
  outline: 0; }

table {
  border-collapse: collapse;
  border-spacing: 0; }

*:before, *:after, * {
  box-sizing: border-box;
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box; }

.ubuntu-b, .form-item label, .products__title, .products__buy .products__price, .signup__data h2 {
  font-family: "Ubuntu", sans-serif;
  font-weight: 700; }

.ubuntu-r {
  font-family: "Ubuntu", sans-serif;
  font-weight: 400; }

.rale-b {
  font-family: "Raleway", sans-serif;
  font-weight: 700; }

.rale-r, .btn, .products__desc, .signup__data p, .p-home .cover h1 {
  font-family: "Raleway", sans-serif;
  font-weight: 400; }

@font-face {
  font-family: 'FI-icons';
  src: url("../fonts/FI-icons.eot?516kv6");
  src: url("../fonts/FI-icons.eot?516kv6#iefix") format("embedded-opentype"), url("../fonts/FI-icons.woff2?516kv6") format("woff2"), url("../fonts/FI-icons.ttf?516kv6") format("truetype"), url("../fonts/FI-icons.woff?516kv6") format("woff"), url("../fonts/FI-icons.svg?516kv6#FI-icons") format("svg");
  font-weight: normal;
  font-style: normal; }

[class^="icon-"], [class*=" icon-"] {
  /* use !important to prevent issues with browser extensions that change fonts */
  font-family: 'FI-icons' !important;
  speak: none;
  font-style: normal;
  font-weight: normal;
  font-variant: normal;
  text-transform: none;
  line-height: 1;
  /* Better Font Rendering =========== */
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale; }

.icon-fb:before {
  content: "\e900"; }

.icon-g-plus:before {
  content: "\e901"; }

.icon-twitter:before {
  content: "\e902"; }

.p-full {
  height: 100vh;
  width: 100%; }

.form-item {
  margin-top: 30px;
  overflow: hidden; }
  .form-item label {
    font-size: 1.2rem;
    color: #b7b7b7;
    text-transform: uppercase; }

.btn {
  font-size: 1.4rem;
  text-transform: uppercase;
  padding: 10px 40px; }
  .btn-red {
    background: white;
    color: #de3838;
    border: 1px solid #de3838;
    text-decoration: none; }
  .btn-black {
    background: white;
    color: black;
    text-decoration: none;
    border: 1px solid black;
    float: right; }

.products {
  width: 91.66667%;
  float: left;
  float: none;
  margin: 80px auto;
  padding-left: 0;
  padding-right: 0; }
  .products__item {
    width: 33.33333%;
    float: left;
    padding: 2.08333%;
    height: 400px; }
    .products__item:nth-child(3n + 1) {
      margin-left: 0;
      margin-right: -100%;
      clear: both; }
    .products__item:nth-child(3n + 2) {
      margin-left: 33.33333%;
      margin-right: -100%;
      clear: none; }
    .products__item:nth-child(3n + 3) {
      margin-left: 66.66667%;
      margin-right: -100%;
      clear: none; }
  .products__image {
    height: 200px;
    width: 100%; }
  .products__source {
    height: 100%;
    width: 100%;
    object-fit: cover; }
  .products__title {
    font-size: 2rem;
    line-height: 1.25;
    margin-top: 20px; }
  .products__desc {
    font-size: 1.2rem;
    line-height: 1.66667;
    margin: 15px 0 10px;
    height: 20px;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis; }
  .products__buy {
    overflow: hidden;
    position: relative; }
    .products__buy .products__price {
      font-size: 2rem;
      line-height: 1;
      float: left;
      position: absolute;
      left: 0;
      top: 50%;
      -webkit-transform: translateY(-50%);
      -ms-transform: translateY(-50%);
      transform: translateY(-50%); }
    .products__buy .btn {
      float: right; }

.container {
  max-width: 100%;
  margin-left: auto;
  margin-right: auto; }
  .container:after {
    content: " ";
    display: block;
    clear: both; }

input[type="text"], input[type="password"] {
  border-bottom: 1px solid #ababab !important;
  height: 25px; }

html {
  font-size: 10px; }

.signup {
  background: #373737;
  position: relative; }
  .signup__container {
    width: 50%;
    float: left;
    margin-left: auto;
    margin-right: auto;
    position: absolute;
    left: 0;
    right: 0;
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
    height: 600px;
    background: white;
    overflow: hidden; }
  .signup__data {
    width: 63.63636%;
    float: left;
    padding: 13.63636% 9.09091% 9.09091%; }
    .signup__data h2 {
      font-size: 3rem; }
    .signup__data p {
      font-size: 1.2rem;
      margin-top: 12px; }
  .signup__submit:hover {
    cursor: pointer; }
  .signup__cover {
    width: 36.36364%;
    float: left; }
  .signup__source {
    width: auto;
    height: 100%;
    object-fit: cover; }
  .signup__inner {
    margin-top: 20px; }

.p-home {
  background: white; }
  .p-home .navigation {
    width: 91.66667%;
    float: left;
    margin-left: auto;
    margin-right: auto;
    padding-left: 0;
    padding-right: 0;
    float: none;
    overflow: hidden;
    position: relative;
    top: 30px;
    height: 50px; }
  .p-home .cover {
    width: 91.66667%;
    float: left;
    margin-left: auto;
    margin-right: auto;
    padding-left: 0;
    padding-right: 0;
    float: none;
    left: 0;
    right: 0;
    height: calc(100vh - 100px);
    top: 50px;
    position: relative;
    background-image: url("../../static/img/cover.jpg");
    background-size: auto 100%; }
    .p-home .cover h1 {
      color: white;
      width: 45.83333%;
      float: left;
      font-size: 4.5rem;
      line-height: 1.22222;
      text-transform: uppercase;
      letter-spacing: 0.2rem;
      position: absolute;
      bottom: 12.5%;
      left: 12.5%; }

/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhlbHBlcnMvbWl4aW5zL19ib3JkZXIuc2NzcyIsImhlbHBlcnMvbWl4aW5zL19yZXNwb25zaXZlTVEuc2NzcyIsImhlbHBlcnMvbWl4aW5zL190cmFuc2Zvcm0uc2NzcyIsImJhc2UvcmVzZXQvX3Jlc2V0LnNjc3MiLCJ2YXJpYWJsZXMvX3NlbGVjdGlvbi5zY3NzIiwiaGVscGVycy9taXhpbnMvX2JveC5zY3NzIiwiYmFzZS90eXBvZ3JhcGh5L190eXBvZ3JhcGh5LnNjc3MiLCJiYXNlL3R5cG9ncmFwaHkvX2ljb25zLnNjc3MiLCJtYWluLmNzcyIsImxheW91dC9fbGF5b3V0LnNjc3MiLCIuLi8uLi9ib3dlcl9jb21wb25lbnRzL3N1c3kvc2Fzcy9zdXN5L291dHB1dC9zdXBwb3J0L19yZW0uc2NzcyIsIi4uLy4uL2Jvd2VyX2NvbXBvbmVudHMvc3VzeS9zYXNzL3N1c3kvbGFuZ3VhZ2Uvc3VzeS9fc3Bhbi5zY3NzIiwiLi4vLi4vYm93ZXJfY29tcG9uZW50cy9zdXN5L3Nhc3Mvc3VzeS9vdXRwdXQvc2hhcmVkL19kaXJlY3Rpb24uc2NzcyIsIi4uLy4uL2Jvd2VyX2NvbXBvbmVudHMvc3VzeS9zYXNzL3N1c3kvbGFuZ3VhZ2Uvc3VzeS9faXNvbGF0ZS5zY3NzIiwiLi4vLi4vYm93ZXJfY29tcG9uZW50cy9zdXN5L3Nhc3Mvc3VzeS9sYW5ndWFnZS9zdXN5L19nYWxsZXJ5LnNjc3MiLCIuLi8uLi9ib3dlcl9jb21wb25lbnRzL3N1c3kvc2Fzcy9zdXN5L2xhbmd1YWdlL3N1c3kvX3Jvd3Muc2NzcyIsImhlbHBlcnMvbWl4aW5zL19mb250LnNjc3MiLCJsYXlvdXQvX2NvbnRhaW5lcnMuc2NzcyIsIi4uLy4uL2Jvd2VyX2NvbXBvbmVudHMvc3VzeS9zYXNzL3N1c3kvbGFuZ3VhZ2Uvc3VzeS9fY29udGFpbmVyLnNjc3MiLCIuLi8uLi9ib3dlcl9jb21wb25lbnRzL3N1c3kvc2Fzcy9zdXN5L291dHB1dC9zdXBwb3J0L19jbGVhcmZpeC5zY3NzIiwicGFnZXMvX3JlZ2lzdGVyLnNjc3MiLCJ2YXJpYWJsZXMvX2NvbG9ycy5zY3NzIiwicGFnZXMvX2hvbWUuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxtQkFBbUI7QUNBbkI7OzBCQUUwQjtBQWdCMUI7OzBCQUUwQjtBQXdCMUI7O21DQUVtQztBQWVuQzs7MEJBRTBCO0FDL0QxQixnQkFBZ0I7QUNBaEI7RUFDSSwrQkFBK0I7RUFDL0Isb0NBQW9DO0VBQ3BDLG1DQUFtQyxFQUN0Qzs7QUFFRDtFQUNJLFVBQVU7RUFDVixXQUFXO0VBQ1gsYUFBYSxFQUNoQjs7QUFFRCxpREFBaUQ7QUFDakQ7O0VBRUksZUFBZSxFQUNsQjs7QUFFRDtFQUFjLFlBQVk7RUFBRSxZQUFZO0VBQUUsWUFBWSxFQUFJOztBQUMxRDtFQUFjLGlCQUFpQixFQUFJOztBQUduQztFQUFjLG9CQ3JCd0I7RURxQm1CLGVDdEI3QixFRHNCMkQ7O0FBQXZGO0VBQWMsb0JDckJ3QjtFRHFCbUIsZUN0QjdCLEVEc0IyRDs7QUFDdkY7RUFBbUIsb0JDdEJtQjtFRHNCd0IsZUN2QmxDLEVEdUJnRTs7QUFHNUY7RUFBUSxZQUFZLEVBQUk7O0FBQ3hCOzs7OztFQUtJLFlBQVk7RUFDWixZQUFZO0VBQ1osVUFBVTtFQUNWLFdBQVc7RUFDWCxhQUFhO0VFNUJULHVCQUF1QjtFQUN2Qiw0QkFBNEI7RUFDNUIsK0JBQStCLEVGOEJ0Qzs7QUFDRDtFQUFXLGlCQUFpQixFQUFJOztBQUNoQztFQUE0QyxjQUFjLEVBQUk7O0FBRTlEO0VBQ0ksV0FBVztFQUNYLFVBQVUsRUFDYjs7QUFFRDtFQUNJLGFBQWE7RUFDYixXQUFXO0VBQ1gsV0FBVyxFQUNkOztBQUVEO0VBQ0ksMEJBQTBCO0VBQzFCLGtCQUFrQixFQUNyQjs7QUFFRDtFRXBEUSx1QkFBdUI7RUFDdkIsNEJBQTRCO0VBQzVCLCtCQUErQixFRm9EdEM7O0FHaEREO0VBQ0ksa0NBQWlDO0VBQ2pDLGlCQUFpQixFQUNwQjs7QUFDRDtFQUNJLGtDQUFpQztFQUNqQyxpQkFBaUIsRUFDcEI7O0FBQ0Q7RUFDSSxtQ0FBa0M7RUFDbEMsaUJBQWlCLEVBQ3BCOztBQUNEO0VBQ0ksbUNBQWtDO0VBQ2xDLGlCQUFpQixFQUNwQjs7QUN6QkQ7RUFDSSx3QkFBd0I7RUFDeEIseUNBQVc7RUFDWCwyU0FJbUQ7RUFDbkQsb0JBQW9CO0VBQ3BCLG1CQUFtQixFQUFBOztBQ2dHdkI7RUQ1RkksZ0ZBQWdGO0VBQ2hGLG1DQUFtQztFQUNuQyxZQUFZO0VBQ1osbUJBQW1CO0VBQ25CLG9CQUFvQjtFQUNwQixxQkFBcUI7RUFDckIscUJBQXFCO0VBQ3JCLGVBQWU7RUFFZix1Q0FBdUM7RUFDdkMsb0NBQW9DO0VBQ3BDLG1DQUFtQyxFQUN0Qzs7QUFFRDtFQUNJLGlCQUFpQixFQUNwQjs7QUFDRDtFQUNJLGlCQUFpQixFQUNwQjs7QUFDRDtFQUNJLGlCQUFpQixFQUNwQjs7QUV2Q0Q7RUFDSSxjQUFhO0VBQ2IsWUFBVyxFQUNkOztBQUNEO0VBQ0ksaUJBQWlCO0VBQ2pCLGlCQUFpQixFQU9wQjtFQVREO0lBS1Esa0JBQWlCO0lBQ2pCLGVBQWM7SUFDZCwwQkFBMEIsRUFDN0I7O0FBRUw7RUFFSSxrQkFBaUI7RUFDakIsMEJBQTBCO0VBQzFCLG1CQUFtQixFQWN0QjtFQWxCRDtJQU1RLGtCQUFpQjtJQUNqQixlQUFjO0lBQ2QsMEJBQXlCO0lBQ3pCLHNCQUFzQixFQUN6QjtFQVZMO0lBWVEsa0JBQWlCO0lBQ2pCLGFBQVk7SUFDWixzQkFBc0I7SUFDdEIsd0JBQXVCO0lBQ3ZCLGFBQVksRUFDZjs7QUFFTDtFQ2RJLGlCQ3dJb0I7RUR4SXBCLFlFQTREO0VIZ0I1RCxZQUFXO0VBQ1gsa0JBQWlCO0VBQ2pCLGdCQUFlO0VBQ2YsaUJBQWdCLEVBNkNuQjtFQWxERDtJQ2RJLGlCQ3dJb0I7SUR4SXBCLFlFQTREO0lIc0J4RCxrQkVrSGdCO0lGakhoQixjQUFjLEVBQ2pCO0lBVkw7TUNkSSxlR3dEaUI7TUh4RGpCLG9CSW9ENkI7TUpwRDdCLFlLWjBCLEVEb0Z6QjtJTDFETDtNQ2RJLHVCQ3dJb0I7TUR4SXBCLG9CSW9ENkI7TUpwRDdCLFlLSjBCLEVENEV6QjtJTDFETDtNQ2RJLHVCQ3dJb0I7TUR4SXBCLG9CSW9ENkI7TUpwRDdCLFlLSjBCLEVENEV6QjtFTDFETDtJQVlRLGNBQWE7SUFDYixZQUFXLEVBQ2Q7RUFkTDtJQWdCUSxhQUFZO0lBQ1osWUFBVztJQUNYLGtCQUFrQixFQUNyQjtFQW5CTDtJT2NJLGdCUFEyQjtJT1AzQixrQkFBOEI7SVBRMUIsaUJBQWlCLEVBQ3BCO0VBeEJMO0lPY0ksa0JQYTZCO0lPWjdCLHFCQUE4QjtJUGExQixvQkFBb0I7SUFDcEIsYUFBYTtJQUNiLGlCQUFpQjtJQUNqQixvQkFBb0I7SUFDcEIsd0JBQXdCLEVBQzNCO0VBakNMO0lBbUNRLGlCQUFpQjtJQUNqQixtQkFBbUIsRUFhdEI7SUFqREw7TU9jSSxnQlB5QitCO01PeEIvQixlQUE4QjtNUHlCdEIsWUFBVztNQUNYLG1CQUFtQjtNQUNuQixRQUFPO01BQ1AsU0FBUTtNQUNSLG9DQUFxQjtNQUFyQixnQ0FBcUI7TUFBckIsNEJBQXFCLEVBQ3hCO0lBN0NUO01BK0NZLGFBQVksRUFDZjs7QVFqRlQ7RVBtQkksZ0JRdUNlO0VSdkNmLGtCUXFEb0M7RVJyRHBDLG1CUXFEbUUsRUR0RXRFO0VBRkQ7SUVZTSxhQUFhO0lBQ2IsZUFBZTtJQUNmLFlBQVksRUFDYjs7QUZaTDtFQUNJLDRDQUF5QztFQUN6QyxhQUFZLEVBQ2Y7O0FBQ0Q7RUFDSSxnQkFBZSxFQUNsQjs7QUdURDtFQUNJLG9CQ3lCVTtFRHhCVixtQkFBbUIsRUEyQ3RCO0VBN0NEO0lWbUJJLFdDd0lvQjtJRHhJcEIsWUVBNEQ7SVFkeEQsa0JBQWlCO0lBQ2pCLG1CQUFrQjtJQUNsQixtQkFBbUI7SUFDbkIsUUFBTztJQUNQLFNBQVE7SUFDUixTQUFRO0lBQ1Isb0NBQW9CO0lBQXBCLGdDQUFvQjtJQUFwQiw0QkFBb0I7SUFDcEIsY0FBYztJQUNkLGtCQUFpQjtJQUNqQixpQkFBaUIsRUFDcEI7RUFmTDtJVm1CSSxpQkN3SW9CO0lEeElwQixZRUE0RDtJUUR4RCxxQ1R5SWdCLEVTL0huQjtJQTVCTDtNQXFCWSxnQkFBZSxFQUNsQjtJQXRCVDtNQXlCWSxrQkFBaUI7TUFDakIsaUJBQWlCLEVBQ3BCO0VBM0JUO0lBK0JZLGdCQUFlLEVBQ2xCO0VBaENUO0lWbUJJLGlCQ3dJb0I7SUR4SXBCLFlFQTRELEVRaUIzRDtFQXBDTDtJQXNDUSxZQUFXO0lBQ1gsYUFBWTtJQUNaLGtCQUFrQixFQUNyQjtFQXpDTDtJQTJDUSxpQkFBaUIsRUFDcEI7O0FFNUNMO0VBQ0ksa0JBQWlCLEVBdUNwQjtFQXhDRDtJWm1CSSxpQkN3SW9CO0lEeElwQixZRUE0RDtJVWZ4RCxrQkFBaUI7SUFDakIsbUJBQWtCO0lBQ2xCLGdCQUFlO0lBQ2YsaUJBQWdCO0lBQ2hCLFlBQVc7SUFDWCxpQkFBaUI7SUFDakIsbUJBQW1CO0lBQ25CLFVBQVM7SUFDVCxhQUFZLEVBQ2Y7RUFiTDtJWm1CSSxpQkN3SW9CO0lEeElwQixZRUE0RDtJVUh4RCxrQkFBaUI7SUFDakIsbUJBQWtCO0lBQ2xCLGdCQUFlO0lBQ2YsaUJBQWdCO0lBQ2hCLFlBQVc7SUFDWCxRQUFPO0lBQ1AsU0FBUTtJQUNSLDRCQUFXO0lBQ1gsVUFBUztJQUNULG1CQUFtQjtJQUNuQixvREFBb0I7SUFDcEIsMkJBQTBCLEVBWTdCO0lBdkNMO01BOEJZLGFBQVk7TVpYcEIsaUJDd0lvQjtNRHhJcEIsWUVBNEQ7TUk0QjVELGtCTWZpQztNTmdCakMscUJBQThCO01NZnRCLDBCQUEwQjtNQUMxQix1QkFBdUI7TUFDdkIsbUJBQW1CO01BQ25CLGNYdUhZO01XdEhaLFlYc0hZLEVXckhmIiwiZmlsZSI6Im1haW4uY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLyogQk9SREVSIFJBRElVUyAqL1xuQG1peGluIGJvcmRlci1yYWRpdXMoJHJhZGl1czogNXB4KSB7XG4gICAgQGluY2x1ZGUgY3NzMy1wcmVmaXgoJ2JvcmRlci1yYWRpdXMnLCAkcmFkaXVzKTtcbn0iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHRCb3VuZHNcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbkBmdW5jdGlvbiBsb3dlci1ib3VuZCgkcmFuZ2Upe1xuICAgIEBpZiBsZW5ndGgoJHJhbmdlKSA8PSAwIHtcbiAgICAgICAgQHJldHVybiAwO1xuICAgIH1cbiAgICBAcmV0dXJuIG50aCgkcmFuZ2UsMSk7XG59XG5cbkBmdW5jdGlvbiB1cHBlci1ib3VuZCgkcmFuZ2UpIHtcbiAgICBAaWYgbGVuZ3RoKCRyYW5nZSkgPCAyIHtcbiAgICAgICAgQHJldHVybiA5OTk5OTk5OTk5OTk7XG4gICAgfVxuICAgIEByZXR1cm4gbnRoKCRyYW5nZSwgMik7XG59XG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdFJhbmdlIGRlZmluaXRpb25zXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4vL01vYmlsZVxuJG1vYmlsZTogXHRcdCgwLCA2MDBweCk7XG4kbW9iaWxlLVM6IFx0XHQoMCwgMzE5cHgpO1xuJG1vYmlsZS1NOiBcdFx0KDMyMHB4LCA0NzlweCk7XG4kbW9iaWxlLVNNOiAgICAgKDAsIDQ3OXB4KTtcbiRtb2JpbGUtTDogXHRcdCg0ODBweCwgNTk5cHgpO1xuXG4vL1RhYmxldFxuJHRhYmxldDogXHRcdCg2MDBweCwgMTAyNHB4KTtcbiR0YWJsZXQtUzogXHRcdCg2MDBweCwgNzY3cHgpO1xuJHRhYmxldC1NOiBcdFx0KDc2N3B4LCA5NzlweCk7XG4kdGFibGV0LVNNOiBcdCg2MDBweCwgOTc5cHgpO1xuJHRhYmxldC1MOiBcdFx0KDc2OHB4LCAxMDI0cHgpO1xuXG4vL0Rlc2t0b3BcbiRkZXNrdG9wOiBcdFx0KDEwMjVweCk7XG4kZGVza3RvcC1TOiBcdCgxMDI1cHgsIDEyMTlweCk7XG4kZGVza3RvcC1NOiBcdCgxMjIwcHgsIDE0MzlweCk7XG4kZGVza3RvcC1MOiBcdCgxNDQwcHgsIDE1OTlweCk7XG4kZGVza3RvcC1YTDogXHQoMTYwMHB4KTtcblxuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdE1lZGlhIFF1ZXJ5IHJhbmdlIHRlbXBsYXRlc1xuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuQG1peGluIE1RLXJhbmdlLWJvdW5kKCRtaW4sICRtYXgpIHtcblxuICAgIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogI3tsb3dlci1ib3VuZCgkbWluKX0pIGFuZCAobWF4LXdpZHRoOiAje3VwcGVyLWJvdW5kKCRtYXgpfSkge0Bjb250ZW50fVxuXG59XG5cbkBtaXhpbiBNUS1yYW5nZS1mcm9tKCRtaW4pIHtcblxuICAgIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogI3tsb3dlci1ib3VuZCgkbWluKX0pIHtAY29udGVudH1cblxufVxuXG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdE1lZGlhIFF1ZXJpZXNcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbkBtaXhpbiBNUSgkY2FudmFzLCAkbWF4bWluOiBtYXgtd2lkdGgsICRzaXplOiAwKSB7XG5cbiAgICBAaWYgJGNhbnZhcyA9PSBtb2JpbGUgIFx0XHQgICAgICAgIHtAaW5jbHVkZSBNUS1yYW5nZS1ib3VuZCBcdCgkbW9iaWxlLCAkbW9iaWxlKSBcdFx0XHR7QGNvbnRlbnR9fVxuICAgIEBlbHNlIGlmICRjYW52YXMgPT0gbW9iaWxlLVNcdFx0e0BpbmNsdWRlIE1RLXJhbmdlLWJvdW5kIFx0KCRtb2JpbGUtUywgJG1vYmlsZS1TKSBcdFx0e0Bjb250ZW50fX1cbiAgICBAZWxzZSBpZiAkY2FudmFzID09IG1vYmlsZS1NXHRcdHtAaW5jbHVkZSBNUS1yYW5nZS1ib3VuZCBcdCgkbW9iaWxlLU0sICRtb2JpbGUtTSkgXHRcdHtAY29udGVudH19XG4gICAgQGVsc2UgaWYgJGNhbnZhcyA9PSBtb2JpbGUtTFx0XHR7QGluY2x1ZGUgTVEtcmFuZ2UtYm91bmQgXHQoJG1vYmlsZS1MLCAkbW9iaWxlLUwpIFx0XHR7QGNvbnRlbnR9fVxuICAgIEBlbHNlIGlmICRjYW52YXMgPT0gbW9iaWxlLUwtXHRcdHtAaW5jbHVkZSBNUS1yYW5nZS1ib3VuZCAgICAoJG1vYmlsZS1MLSwgJG1vYmlsZS1MLSkgXHR7QGNvbnRlbnR9fVxuXG4gICAgQGVsc2UgaWYgJGNhbnZhcyA9PSBtb2JpbGUtIFx0XHR7QGluY2x1ZGUgTVEtcmFuZ2UtZnJvbSBcdCgkdGFibGV0KSBcdFx0XHRcdFx0e0Bjb250ZW50fX1cblxuICAgIEBlbHNlIGlmICRjYW52YXMgPT0gdGFibGV0XHRcdCAgICB7QGluY2x1ZGUgTVEtcmFuZ2UtYm91bmQgXHQoJHRhYmxldCwgJHRhYmxldCkgXHRcdFx0e0Bjb250ZW50fX1cbiAgICBAZWxzZSBpZiAkY2FudmFzID09IHRhYmxldC1TXHRcdHtAaW5jbHVkZSBNUS1yYW5nZS1ib3VuZCBcdCgkdGFibGV0LVMsICR0YWJsZXQtUykgXHRcdHtAY29udGVudH19XG4gICAgQGVsc2UgaWYgJGNhbnZhcyA9PSB0YWJsZXQtTVx0XHR7QGluY2x1ZGUgTVEtcmFuZ2UtYm91bmQgXHQoJHRhYmxldC1NLCAkdGFibGV0LU0pIFx0XHR7QGNvbnRlbnR9fVxuICAgIEBlbHNlIGlmICRjYW52YXMgPT0gdGFibGV0LUxcdFx0e0BpbmNsdWRlIE1RLXJhbmdlLWJvdW5kIFx0KCR0YWJsZXQtTCwgJHRhYmxldC1MKSBcdFx0e0Bjb250ZW50fX1cblxuICAgIEBlbHNlIGlmICRjYW52YXMgPT0gZGVza3RvcC0gXHQgICAge0BpbmNsdWRlIE1RLXJhbmdlLWJvdW5kIFx0KCRtb2JpbGUsICR0YWJsZXQpIFx0XHRcdHtAY29udGVudH19XG5cbiAgICBAZWxzZSBpZiAkY2FudmFzID09IGRlc2t0b3BcdFx0ICAgIHtAaW5jbHVkZSBNUS1yYW5nZS1mcm9tIFx0KCRkZXNrdG9wKSBcdFx0XHRcdFx0e0Bjb250ZW50fX1cbiAgICBAZWxzZSBpZiAkY2FudmFzID09IGRlc2t0b3AtU1x0ICAgIHtAaW5jbHVkZSBNUS1yYW5nZS1ib3VuZCBcdCgkZGVza3RvcC1TLCAkZGVza3RvcC1TKSBcdHtAY29udGVudH19XG4gICAgQGVsc2UgaWYgJGNhbnZhcyA9PSBkZXNrdG9wLU1cdCAgICB7QGluY2x1ZGUgTVEtcmFuZ2UtYm91bmQgXHQoJGRlc2t0b3AtTSwgJGRlc2t0b3AtTSkgXHR7QGNvbnRlbnR9fVxuICAgIEBlbHNlIGlmICRjYW52YXMgPT0gZGVza3RvcC1MXHQgICAge0BpbmNsdWRlIE1RLXJhbmdlLWJvdW5kIFx0KCRkZXNrdG9wLUwsICRkZXNrdG9wLUwpIFx0e0Bjb250ZW50fX1cbiAgICBAZWxzZSBpZiAkY2FudmFzID09IGRlc2t0b3AtWExcdCAgICB7QGluY2x1ZGUgTVEtcmFuZ2UtZnJvbSBcdCgkZGVza3RvcC1YTCkgXHRcdFx0XHR7QGNvbnRlbnR9fVxuXG4gICAgQGVsc2Uge1xuXG4gICAgICAgIEBtZWRpYSAoJG1heG1pbjogJGNhbnZhcykge1xuICAgICAgICAgICAgQGNvbnRlbnQ7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbkBpbmNsdWRlIE1RKGRlc2t0b3ApIHtcblxufSIsIi8qIFRSQU5TRk9STSAgKi9cbkBtaXhpbiB0cmFuc2Zvcm0oJHBhcmFtcykge1xuICAgIEBpbmNsdWRlIGNzczMtcHJlZml4KCd0cmFuc2Zvcm0nLCAkcGFyYW1zKTtcbn1cblxuQG1peGluIHRyYW5zZm9ybS1zY2FsZSgkc2l6ZVg6IDEsICRzaXplWTogJHNpemVYKSB7XG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKCRzaXplWCwgJHNpemVZKTtcbiAgICAtbW96LXRyYW5zZm9ybTogc2NhbGUoJHNpemVYLCAkc2l6ZVkpO1xuICAgIC1tcy10cmFuc2Zvcm06IHNjYWxlKCRzaXplWCwgJHNpemVZKTtcbiAgICAtby10cmFuc2Zvcm06IHNjYWxlKCRzaXplWCwgJHNpemVZKTtcbiAgICB0cmFuc2Zvcm06IHNjYWxlKCRzaXplWCwgJHNpemVZKTtcbn1cblxuQG1peGluIHRyYW5zZm9ybS1vcmlnaW4oJG9yaWdpbikge1xuICAgIC13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjogI3skb3JpZ2lufTtcbiAgICAtbW96LXRyYW5zZm9ybS1vcmlnaW46ICN7JG9yaWdpbn07XG4gICAgLW1zLXRyYW5zZm9ybS1vcmlnaW46ICN7JG9yaWdpbn07XG4gICAgLW8tdHJhbnNmb3JtLW9yaWdpbjogI3skb3JpZ2lufTtcbiAgICB0cmFuc2Zvcm0tb3JpZ2luOiAjeyRvcmlnaW59O1xufVxuXG5AbWl4aW4gcm90YXRlKCRkZWdyZWVzOiAwKSB7XG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgjeyRkZWdyZWVzfWRlZyk7XG4gICAgLW1vei10cmFuc2Zvcm06IHJvdGF0ZSgjeyRkZWdyZWVzfWRlZyk7XG4gICAgLW1zLXRyYW5zZm9ybTogcm90YXRlKCN7JGRlZ3JlZXN9ZGVnKTtcbiAgICAtby10cmFuc2Zvcm06IHJvdGF0ZSgjeyRkZWdyZWVzfWRlZyk7XG4gICAgdHJhbnNmb3JtOiByb3RhdGUoI3skZGVncmVlc31kZWcpO1xufVxuXG5AbWl4aW4gcm90YXRlLXNjYWxlKCRkZWdyZWVzOiAwLCAkc2l6ZVg6IDEsICRzaXplWTogJHNpemVYKSB7XG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgjeyRkZWdyZWVzfWRlZykgc2NhbGUoJHNpemVYLCAkc2l6ZVkpO1xuICAgIC1tb3otdHJhbnNmb3JtOiByb3RhdGUoI3skZGVncmVlc31kZWcpIHNjYWxlKCRzaXplWCwgJHNpemVZKTtcbiAgICAtbXMtdHJhbnNmb3JtOiByb3RhdGUoI3skZGVncmVlc31kZWcpIHNjYWxlKCRzaXplWCwgJHNpemVZKTtcbiAgICAtby10cmFuc2Zvcm06IHJvdGF0ZSgjeyRkZWdyZWVzfWRlZykgc2NhbGUoJHNpemVYLCAkc2l6ZVkpO1xuICAgIHRyYW5zZm9ybTogcm90YXRlKCN7JGRlZ3JlZXN9ZGVnKSBzY2FsZSgkc2l6ZVgsICRzaXplWSk7XG59IiwiaHRtbCxib2R5LGlucHV0LGJ1dHRvbiB7XG4gICAgLXdlYmtpdC10ZXh0LXNpemUtYWRqdXN0OiBub25lO1xuICAgIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xuICAgIHRleHQtcmVuZGVyaW5nOiBvcHRpbWl6ZUxlZ2liaWxpdHk7XG59XG5cbmJvZHksaDEsaDIsaDMsaDQsaDUsaDYsdWwsb2wscCxocixmb3JtIHtcbiAgICBtYXJnaW46IDA7XG4gICAgcGFkZGluZzogMDtcbiAgICBib3JkZXI6IG5vbmU7XG59XG5cbi8qIEhUTUw1IGRpc3BsYXktcm9sZSByZXNldCBmb3Igb2xkZXIgYnJvd3NlcnMgKi9cbmFydGljbGUsIGFzaWRlLCBkZXRhaWxzLCBmaWdjYXB0aW9uLCBmaWd1cmUsXG5mb290ZXIsIGhlYWRlciwgaGdyb3VwLCBtZW51LCBuYXYsIHNlY3Rpb24ge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xufVxuXG5ociAgICAgICAgICB7IGZsb2F0OiBsZWZ0OyB3aWR0aDogMTAwJTsgaGVpZ2h0OiAxcHg7IH1cbnVsLG9sICAgICAgIHsgbGlzdC1zdHlsZTogbm9uZTsgfVxuXG4vL3RleHQgc2VsZWN0aW9uXG46OnNlbGVjdGlvbiB7IGJhY2tncm91bmQ6ICRodG1sc2VsZWN0aW9uYmFja2dyb3VuZGNvbG9yOyBjb2xvcjogJGh0bWxzZWxlY3Rpb25jb2xvcjsgfVxuOjotbW96LXNlbGVjdGlvbiB7IGJhY2tncm91bmQ6ICRodG1sc2VsZWN0aW9uYmFja2dyb3VuZGNvbG9yOyBjb2xvcjogJGh0bWxzZWxlY3Rpb25jb2xvcjsgfVxuXG4vL2lucHV0c1xuaW5wdXQgeyB3aWR0aDogYXV0bzsgfVxuaW5wdXRbdHlwZT1cInRleHRcIl0sXG5pbnB1dFt0eXBlPVwicGFzc3dvcmRcIl0sXG5pbnB1dFt0eXBlPVwiZW1haWxcIl0sXG5pbnB1dFt0eXBlPVwic2VhcmNoXCJdLFxudGV4dGFyZWEge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGZsb2F0OiBsZWZ0O1xuICAgIG1hcmdpbjogMDtcbiAgICBwYWRkaW5nOiAwO1xuICAgIGJvcmRlcjogbm9uZTtcblxuICAgIC8vWW91IGNhbiBlYXNpbHkgdXNlIGJvcmRlciB3aXRob3V0IG1lc3NpbmcgdXAgdGhlIGxheW91dCB3aXRoIHRoaXNcbiAgICBAaW5jbHVkZSBib3JkZXItYm94KCk7XG59XG50ZXh0YXJlYSB7IHJlc2l6ZTogdmVydGljYWw7IH1cbmlucHV0OmZvY3VzLCB0ZXh0YXJlYTpmb2N1cywgc2VsZWN0OmZvY3VzIHsgb3V0bGluZTogbm9uZTsgfVxuXG5maWd1cmUge1xuICAgIHBhZGRpbmc6IDA7XG4gICAgbWFyZ2luOiAwO1xufVxuXG5maWVsZHNldCB7XG4gICAgYm9yZGVyOiBub25lO1xuICAgIHBhZGRpbmc6IDA7XG4gICAgb3V0bGluZTogMDtcbn1cblxudGFibGUge1xuICAgIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XG4gICAgYm9yZGVyLXNwYWNpbmc6IDA7XG59XG5cbio6YmVmb3JlLCAqOmFmdGVyLCAqIHtcbiAgICBAaW5jbHVkZSBib3JkZXItYm94KCk7XG59XG5cbiIsIiRodG1sc2VsZWN0aW9uY29sb3I6ICNmZmZmZmY7XG4kaHRtbHNlbGVjdGlvbmJhY2tncm91bmRjb2xvcjogIzAwMDAwMDsiLCJAbWl4aW4gYmFja2ZhY2UtdmlzaWJpbGl0eSgkYmFja2ZhY2UtdmlzaWJpbGl0eTogaW5oZXJpdCkge1xuICAgIC13ZWJraXQtYmFja2ZhY2UtdmlzaWJpbGl0eTogJGJhY2tmYWNlLXZpc2liaWxpdHk7XG4gICAgLW1vei1iYWNrZmFjZS12aXNpYmlsaXR5OiAkYmFja2ZhY2UtdmlzaWJpbGl0eTtcbiAgICBiYWNrZmFjZS12aXNpYmlsaXR5OiAkYmFja2ZhY2UtdmlzaWJpbGl0eTtcbn1cblxuQG1peGluIGJvcmRlci1ib3goJHZhcjogdHJ1ZSkge1xuICAgIEBpZiAoJHZhcikge1xuICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICAtbW96LWJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICAgIC13ZWJraXQtYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICB9IEBlbHNlIHtcbiAgICAgICAgYm94LXNpemluZzogY29udGVudC1ib3g7XG4gICAgICAgIC1tb3otYm94LXNpemluZzogY29udGVudC1ib3g7XG4gICAgICAgIC13ZWJraXQtYm94LXNpemluZzogY29udGVudC1ib3g7XG4gICAgfVxufVxuXG5AbWl4aW4gYm9yZGVyLXJhZGl1cygkcmFkaXVzOiAwLCAkcG9zaXRpb246IGFsbCwgJHRvcC1sZWZ0OiAkcmFkaXVzLCAkdG9wLXJpZ2h0OiAkcmFkaXVzLCAkYm90dG9tLXJpZ2h0OiAkcmFkaXVzLCAkYm90dG9tLWxlZnQ6ICRyYWRpdXMpIHtcbiAgICBAaWYgJHJhZGl1cyA9PSAnY2lyY2xlJyB7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDEwMCU7XG4gICAgICAgIC1tb3otYm9yZGVyLXJhZGl1czogMTAwJTtcbiAgICAgICAgLXdlYmtpdC1ib3JkZXItcmFkaXVzOiAxMDAlO1xuICAgIH0gQGVsc2Uge1xuICAgICAgICBAaWYgJHBvc2l0aW9uID09ICdhbGwnIHtcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6ICRyYWRpdXM7XG4gICAgICAgICAgICAtbW96LWJvcmRlci1yYWRpdXM6ICRyYWRpdXM7XG4gICAgICAgICAgICAtd2Via2l0LWJvcmRlci1yYWRpdXM6ICRyYWRpdXM7XG4gICAgICAgIH1cbiAgICAgICAgQGVsc2UgaWYgJHBvc2l0aW9uID09ICd0b3AnIHtcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6ICRyYWRpdXMgJHJhZGl1cyAwIDA7XG4gICAgICAgICAgICAtbW96LWJvcmRlci1yYWRpdXM6ICRyYWRpdXMgJHJhZGl1cyAwIDA7XG4gICAgICAgICAgICAtd2Via2l0LWJvcmRlci1yYWRpdXM6ICRyYWRpdXMgJHJhZGl1cyAwIDA7XG4gICAgICAgIH1cbiAgICAgICAgQGVsc2UgaWYgJHBvc2l0aW9uID09ICdib3R0b20nIHtcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDAgMCAkcmFkaXVzICRyYWRpdXM7XG4gICAgICAgICAgICAtbW96LWJvcmRlci1yYWRpdXM6IDAgMCAkcmFkaXVzICRyYWRpdXM7XG4gICAgICAgICAgICAtd2Via2l0LWJvcmRlci1yYWRpdXM6IDAgMCAkcmFkaXVzICRyYWRpdXM7XG4gICAgICAgIH1cbiAgICAgICAgQGVsc2UgaWYgJHBvc2l0aW9uID09ICdsZWZ0JyB7XG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiAkcmFkaXVzIDAgMCAkcmFkaXVzO1xuICAgICAgICAgICAgLW1vei1ib3JkZXItcmFkaXVzOiAkcmFkaXVzIDAgMCAkcmFkaXVzO1xuICAgICAgICAgICAgLXdlYmtpdC1ib3JkZXItcmFkaXVzOiAkcmFkaXVzIDAgMCAkcmFkaXVzO1xuICAgICAgICB9XG4gICAgICAgIEBlbHNlIGlmICRwb3NpdGlvbiA9PSAncmlnaHQnIHtcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDAgJHJhZGl1cyAkcmFkaXVzIDA7XG4gICAgICAgICAgICAtbW96LWJvcmRlci1yYWRpdXM6IDAgJHJhZGl1cyAkcmFkaXVzIDA7XG4gICAgICAgICAgICAtd2Via2l0LWJvcmRlci1yYWRpdXM6IDAgJHJhZGl1cyAkcmFkaXVzIDA7XG4gICAgICAgIH1cbiAgICAgICAgQGVsc2Uge1xuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogJHRvcC1sZWZ0ICR0b3AtcmlnaHQgJGJvdHRvbS1yaWdodCAkYm90dG9tLWxlZnQ7XG4gICAgICAgICAgICAtbW96LWJvcmRlci1yYWRpdXM6ICR0b3AtbGVmdCAkdG9wLXJpZ2h0ICRib3R0b20tcmlnaHQgJGJvdHRvbS1sZWZ0O1xuICAgICAgICAgICAgLXdlYmtpdC1ib3JkZXItcmFkaXVzOiAkdG9wLWxlZnQgJHRvcC1yaWdodCAkYm90dG9tLXJpZ2h0ICRib3R0b20tbGVmdDtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuQG1peGluIGJveC1zaGFkb3coJGNvbG9yOiB0cmFuc3BhcmVudCwgJGgtc2hhZG93OiAwLCAkdi1zaGFkb3c6IDAsICRibHVyOiAwLCAkc3ByZWFkOiAwLCAkdHlwZTogbm9uZSkge1xuICAgIEBpZiAkdHlwZSA9PSBcImluc2V0XCIge1xuICAgICAgICBib3gtc2hhZG93OiAkaC1zaGFkb3cgJHYtc2hhZG93ICRibHVyICRzcHJlYWQgJGNvbG9yIGluc2V0O1xuICAgICAgICAtbW96LWJveC1zaGFkb3c6ICRoLXNoYWRvdyAkdi1zaGFkb3cgJGJsdXIgJHNwcmVhZCAkY29sb3IgaW5zZXQ7XG4gICAgICAgIC13ZWJraXQtYm94LXNoYWRvdzogJGgtc2hhZG93ICR2LXNoYWRvdyAkYmx1ciAkc3ByZWFkICRjb2xvciBpbnNldDtcbiAgICB9IEBlbHNlIHtcbiAgICAgICAgYm94LXNoYWRvdzogJGgtc2hhZG93ICR2LXNoYWRvdyAkYmx1ciAkc3ByZWFkICRjb2xvcjtcbiAgICAgICAgLW1vei1ib3gtc2hhZG93OiAkaC1zaGFkb3cgJHYtc2hhZG93ICRibHVyICRzcHJlYWQgJGNvbG9yO1xuICAgICAgICAtd2Via2l0LWJveC1zaGFkb3c6ICRoLXNoYWRvdyAkdi1zaGFkb3cgJGJsdXIgJHNwcmVhZCAkY29sb3I7XG4gICAgfVxufSIsIi8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuLy8jIyBGT05UIFZBUklBQkxFUyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG4vLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcblxuXG4vLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcbi8vIyMgRk9OVCBGQUNFIEdFTkVSQVRPUiAjIyMjIyMjIyMjIyMjIyMjI1xuLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG5cblxuLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG4vLyMjIFNJWkVTICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcbi8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuXG4udWJ1bnR1LWJ7XG4gICAgZm9udC1mYW1pbHk6XCJVYnVudHVcIiwgc2Fucy1zZXJpZjtcbiAgICBmb250LXdlaWdodDogNzAwO1xufVxuLnVidW50dS1ye1xuICAgIGZvbnQtZmFtaWx5OlwiVWJ1bnR1XCIsIHNhbnMtc2VyaWY7XG4gICAgZm9udC13ZWlnaHQ6IDQwMDtcbn1cbi5yYWxlLWJ7XG4gICAgZm9udC1mYW1pbHk6XCJSYWxld2F5XCIsIHNhbnMtc2VyaWY7XG4gICAgZm9udC13ZWlnaHQ6IDcwMDtcbn1cbi5yYWxlLXJ7XG4gICAgZm9udC1mYW1pbHk6XCJSYWxld2F5XCIsIHNhbnMtc2VyaWY7XG4gICAgZm9udC13ZWlnaHQ6IDQwMDtcbn0iLCIvLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcbi8vIyMgRk9OVCBGQUNFIElDT05TICMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG5cbkBmb250LWZhY2Uge1xuICAgIGZvbnQtZmFtaWx5OiAnRkktaWNvbnMnO1xuICAgIHNyYzogICAgdXJsKCcuLi9mb250cy9GSS1pY29ucy5lb3Q/NTE2a3Y2Jyk7XG4gICAgc3JjOiAgICB1cmwoJy4uL2ZvbnRzL0ZJLWljb25zLmVvdD81MTZrdjYjaWVmaXgnKSBmb3JtYXQoJ2VtYmVkZGVkLW9wZW50eXBlJyksXG4gICAgdXJsKCcuLi9mb250cy9GSS1pY29ucy53b2ZmMj81MTZrdjYnKSBmb3JtYXQoJ3dvZmYyJyksXG4gICAgdXJsKCcuLi9mb250cy9GSS1pY29ucy50dGY/NTE2a3Y2JykgZm9ybWF0KCd0cnVldHlwZScpLFxuICAgIHVybCgnLi4vZm9udHMvRkktaWNvbnMud29mZj81MTZrdjYnKSBmb3JtYXQoJ3dvZmYnKSxcbiAgICB1cmwoJy4uL2ZvbnRzL0ZJLWljb25zLnN2Zz81MTZrdjYjRkktaWNvbnMnKSBmb3JtYXQoJ3N2ZycpO1xuICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gICAgZm9udC1zdHlsZTogbm9ybWFsO1xufVxuXG5bY2xhc3NePVwiaWNvbi1cIl0sIFtjbGFzcyo9XCIgaWNvbi1cIl0ge1xuICAgIC8qIHVzZSAhaW1wb3J0YW50IHRvIHByZXZlbnQgaXNzdWVzIHdpdGggYnJvd3NlciBleHRlbnNpb25zIHRoYXQgY2hhbmdlIGZvbnRzICovXG4gICAgZm9udC1mYW1pbHk6ICdGSS1pY29ucycgIWltcG9ydGFudDtcbiAgICBzcGVhazogbm9uZTtcbiAgICBmb250LXN0eWxlOiBub3JtYWw7XG4gICAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgICBmb250LXZhcmlhbnQ6IG5vcm1hbDtcbiAgICB0ZXh0LXRyYW5zZm9ybTogbm9uZTtcbiAgICBsaW5lLWhlaWdodDogMTtcblxuICAgIC8qIEJldHRlciBGb250IFJlbmRlcmluZyA9PT09PT09PT09PSAqL1xuICAgIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xuICAgIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7XG59XG5cbi5pY29uLWZiOmJlZm9yZSB7XG4gICAgY29udGVudDogXCJcXGU5MDBcIjtcbn1cbi5pY29uLWctcGx1czpiZWZvcmUge1xuICAgIGNvbnRlbnQ6IFwiXFxlOTAxXCI7XG59XG4uaWNvbi10d2l0dGVyOmJlZm9yZSB7XG4gICAgY29udGVudDogXCJcXGU5MDJcIjtcbn1cblxuIiwiLyogQk9SREVSIFJBRElVUyAqL1xuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0Qm91bmRzXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0UmFuZ2UgZGVmaW5pdGlvbnNcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdE1lZGlhIFF1ZXJ5IHJhbmdlIHRlbXBsYXRlc1xuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdE1lZGlhIFF1ZXJpZXNcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKiBUUkFOU0ZPUk0gICovXG5odG1sLCBib2R5LCBpbnB1dCwgYnV0dG9uIHtcbiAgLXdlYmtpdC10ZXh0LXNpemUtYWRqdXN0OiBub25lO1xuICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcbiAgdGV4dC1yZW5kZXJpbmc6IG9wdGltaXplTGVnaWJpbGl0eTsgfVxuXG5ib2R5LCBoMSwgaDIsIGgzLCBoNCwgaDUsIGg2LCB1bCwgb2wsIHAsIGhyLCBmb3JtIHtcbiAgbWFyZ2luOiAwO1xuICBwYWRkaW5nOiAwO1xuICBib3JkZXI6IG5vbmU7IH1cblxuLyogSFRNTDUgZGlzcGxheS1yb2xlIHJlc2V0IGZvciBvbGRlciBicm93c2VycyAqL1xuYXJ0aWNsZSwgYXNpZGUsIGRldGFpbHMsIGZpZ2NhcHRpb24sIGZpZ3VyZSxcbmZvb3RlciwgaGVhZGVyLCBoZ3JvdXAsIG1lbnUsIG5hdiwgc2VjdGlvbiB7XG4gIGRpc3BsYXk6IGJsb2NrOyB9XG5cbmhyIHtcbiAgZmxvYXQ6IGxlZnQ7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDFweDsgfVxuXG51bCwgb2wge1xuICBsaXN0LXN0eWxlOiBub25lOyB9XG5cbjo6c2VsZWN0aW9uIHtcbiAgYmFja2dyb3VuZDogIzAwMDAwMDtcbiAgY29sb3I6ICNmZmZmZmY7IH1cblxuOjotbW96LXNlbGVjdGlvbiB7XG4gIGJhY2tncm91bmQ6ICMwMDAwMDA7XG4gIGNvbG9yOiAjZmZmZmZmOyB9XG5cbmlucHV0IHtcbiAgd2lkdGg6IGF1dG87IH1cblxuaW5wdXRbdHlwZT1cInRleHRcIl0sXG5pbnB1dFt0eXBlPVwicGFzc3dvcmRcIl0sXG5pbnB1dFt0eXBlPVwiZW1haWxcIl0sXG5pbnB1dFt0eXBlPVwic2VhcmNoXCJdLFxudGV4dGFyZWEge1xuICB3aWR0aDogMTAwJTtcbiAgZmxvYXQ6IGxlZnQ7XG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDtcbiAgYm9yZGVyOiBub25lO1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAtbW96LWJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIC13ZWJraXQtYm94LXNpemluZzogYm9yZGVyLWJveDsgfVxuXG50ZXh0YXJlYSB7XG4gIHJlc2l6ZTogdmVydGljYWw7IH1cblxuaW5wdXQ6Zm9jdXMsIHRleHRhcmVhOmZvY3VzLCBzZWxlY3Q6Zm9jdXMge1xuICBvdXRsaW5lOiBub25lOyB9XG5cbmZpZ3VyZSB7XG4gIHBhZGRpbmc6IDA7XG4gIG1hcmdpbjogMDsgfVxuXG5maWVsZHNldCB7XG4gIGJvcmRlcjogbm9uZTtcbiAgcGFkZGluZzogMDtcbiAgb3V0bGluZTogMDsgfVxuXG50YWJsZSB7XG4gIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XG4gIGJvcmRlci1zcGFjaW5nOiAwOyB9XG5cbio6YmVmb3JlLCAqOmFmdGVyLCAqIHtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgLW1vei1ib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAtd2Via2l0LWJveC1zaXppbmc6IGJvcmRlci1ib3g7IH1cblxuLnVidW50dS1iLCAuZm9ybS1pdGVtIGxhYmVsLCAucHJvZHVjdHNfX3RpdGxlLCAucHJvZHVjdHNfX2J1eSAucHJvZHVjdHNfX3ByaWNlLCAuc2lnbnVwX19kYXRhIGgyIHtcbiAgZm9udC1mYW1pbHk6IFwiVWJ1bnR1XCIsIHNhbnMtc2VyaWY7XG4gIGZvbnQtd2VpZ2h0OiA3MDA7IH1cblxuLnVidW50dS1yIHtcbiAgZm9udC1mYW1pbHk6IFwiVWJ1bnR1XCIsIHNhbnMtc2VyaWY7XG4gIGZvbnQtd2VpZ2h0OiA0MDA7IH1cblxuLnJhbGUtYiB7XG4gIGZvbnQtZmFtaWx5OiBcIlJhbGV3YXlcIiwgc2Fucy1zZXJpZjtcbiAgZm9udC13ZWlnaHQ6IDcwMDsgfVxuXG4ucmFsZS1yLCAuYnRuLCAucHJvZHVjdHNfX2Rlc2MsIC5zaWdudXBfX2RhdGEgcCwgLnAtaG9tZSAuY292ZXIgaDEge1xuICBmb250LWZhbWlseTogXCJSYWxld2F5XCIsIHNhbnMtc2VyaWY7XG4gIGZvbnQtd2VpZ2h0OiA0MDA7IH1cblxuQGZvbnQtZmFjZSB7XG4gIGZvbnQtZmFtaWx5OiAnRkktaWNvbnMnO1xuICBzcmM6IHVybChcIi4uL2ZvbnRzL0ZJLWljb25zLmVvdD81MTZrdjZcIik7XG4gIHNyYzogdXJsKFwiLi4vZm9udHMvRkktaWNvbnMuZW90PzUxNmt2NiNpZWZpeFwiKSBmb3JtYXQoXCJlbWJlZGRlZC1vcGVudHlwZVwiKSwgdXJsKFwiLi4vZm9udHMvRkktaWNvbnMud29mZjI/NTE2a3Y2XCIpIGZvcm1hdChcIndvZmYyXCIpLCB1cmwoXCIuLi9mb250cy9GSS1pY29ucy50dGY/NTE2a3Y2XCIpIGZvcm1hdChcInRydWV0eXBlXCIpLCB1cmwoXCIuLi9mb250cy9GSS1pY29ucy53b2ZmPzUxNmt2NlwiKSBmb3JtYXQoXCJ3b2ZmXCIpLCB1cmwoXCIuLi9mb250cy9GSS1pY29ucy5zdmc/NTE2a3Y2I0ZJLWljb25zXCIpIGZvcm1hdChcInN2Z1wiKTtcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgZm9udC1zdHlsZTogbm9ybWFsOyB9XG5cbltjbGFzc149XCJpY29uLVwiXSwgW2NsYXNzKj1cIiBpY29uLVwiXSB7XG4gIC8qIHVzZSAhaW1wb3J0YW50IHRvIHByZXZlbnQgaXNzdWVzIHdpdGggYnJvd3NlciBleHRlbnNpb25zIHRoYXQgY2hhbmdlIGZvbnRzICovXG4gIGZvbnQtZmFtaWx5OiAnRkktaWNvbnMnICFpbXBvcnRhbnQ7XG4gIHNwZWFrOiBub25lO1xuICBmb250LXN0eWxlOiBub3JtYWw7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gIGZvbnQtdmFyaWFudDogbm9ybWFsO1xuICB0ZXh0LXRyYW5zZm9ybTogbm9uZTtcbiAgbGluZS1oZWlnaHQ6IDE7XG4gIC8qIEJldHRlciBGb250IFJlbmRlcmluZyA9PT09PT09PT09PSAqL1xuICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcbiAgLW1vei1vc3gtZm9udC1zbW9vdGhpbmc6IGdyYXlzY2FsZTsgfVxuXG4uaWNvbi1mYjpiZWZvcmUge1xuICBjb250ZW50OiBcIlxcZTkwMFwiOyB9XG5cbi5pY29uLWctcGx1czpiZWZvcmUge1xuICBjb250ZW50OiBcIlxcZTkwMVwiOyB9XG5cbi5pY29uLXR3aXR0ZXI6YmVmb3JlIHtcbiAgY29udGVudDogXCJcXGU5MDJcIjsgfVxuXG4ucC1mdWxsIHtcbiAgaGVpZ2h0OiAxMDB2aDtcbiAgd2lkdGg6IDEwMCU7IH1cblxuLmZvcm0taXRlbSB7XG4gIG1hcmdpbi10b3A6IDMwcHg7XG4gIG92ZXJmbG93OiBoaWRkZW47IH1cbiAgLmZvcm0taXRlbSBsYWJlbCB7XG4gICAgZm9udC1zaXplOiAxLjJyZW07XG4gICAgY29sb3I6ICNiN2I3Yjc7XG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTsgfVxuXG4uYnRuIHtcbiAgZm9udC1zaXplOiAxLjRyZW07XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gIHBhZGRpbmc6IDEwcHggNDBweDsgfVxuICAuYnRuLXJlZCB7XG4gICAgYmFja2dyb3VuZDogd2hpdGU7XG4gICAgY29sb3I6ICNkZTM4Mzg7XG4gICAgYm9yZGVyOiAxcHggc29saWQgI2RlMzgzODtcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7IH1cbiAgLmJ0bi1ibGFjayB7XG4gICAgYmFja2dyb3VuZDogd2hpdGU7XG4gICAgY29sb3I6IGJsYWNrO1xuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcbiAgICBmbG9hdDogcmlnaHQ7IH1cblxuLnByb2R1Y3RzIHtcbiAgd2lkdGg6IDkxLjY2NjY3JTtcbiAgZmxvYXQ6IGxlZnQ7XG4gIGZsb2F0OiBub25lO1xuICBtYXJnaW46IDgwcHggYXV0bztcbiAgcGFkZGluZy1sZWZ0OiAwO1xuICBwYWRkaW5nLXJpZ2h0OiAwOyB9XG4gIC5wcm9kdWN0c19faXRlbSB7XG4gICAgd2lkdGg6IDMzLjMzMzMzJTtcbiAgICBmbG9hdDogbGVmdDtcbiAgICBwYWRkaW5nOiAyLjA4MzMzJTtcbiAgICBoZWlnaHQ6IDQwMHB4OyB9XG4gICAgLnByb2R1Y3RzX19pdGVtOm50aC1jaGlsZCgzbiArIDEpIHtcbiAgICAgIG1hcmdpbi1sZWZ0OiAwO1xuICAgICAgbWFyZ2luLXJpZ2h0OiAtMTAwJTtcbiAgICAgIGNsZWFyOiBib3RoOyB9XG4gICAgLnByb2R1Y3RzX19pdGVtOm50aC1jaGlsZCgzbiArIDIpIHtcbiAgICAgIG1hcmdpbi1sZWZ0OiAzMy4zMzMzMyU7XG4gICAgICBtYXJnaW4tcmlnaHQ6IC0xMDAlO1xuICAgICAgY2xlYXI6IG5vbmU7IH1cbiAgICAucHJvZHVjdHNfX2l0ZW06bnRoLWNoaWxkKDNuICsgMykge1xuICAgICAgbWFyZ2luLWxlZnQ6IDY2LjY2NjY3JTtcbiAgICAgIG1hcmdpbi1yaWdodDogLTEwMCU7XG4gICAgICBjbGVhcjogbm9uZTsgfVxuICAucHJvZHVjdHNfX2ltYWdlIHtcbiAgICBoZWlnaHQ6IDIwMHB4O1xuICAgIHdpZHRoOiAxMDAlOyB9XG4gIC5wcm9kdWN0c19fc291cmNlIHtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgb2JqZWN0LWZpdDogY292ZXI7IH1cbiAgLnByb2R1Y3RzX190aXRsZSB7XG4gICAgZm9udC1zaXplOiAycmVtO1xuICAgIGxpbmUtaGVpZ2h0OiAxLjI1O1xuICAgIG1hcmdpbi10b3A6IDIwcHg7IH1cbiAgLnByb2R1Y3RzX19kZXNjIHtcbiAgICBmb250LXNpemU6IDEuMnJlbTtcbiAgICBsaW5lLWhlaWdodDogMS42NjY2NztcbiAgICBtYXJnaW46IDE1cHggMCAxMHB4O1xuICAgIGhlaWdodDogMjBweDtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7IH1cbiAgLnByb2R1Y3RzX19idXkge1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgcG9zaXRpb246IHJlbGF0aXZlOyB9XG4gICAgLnByb2R1Y3RzX19idXkgLnByb2R1Y3RzX19wcmljZSB7XG4gICAgICBmb250LXNpemU6IDJyZW07XG4gICAgICBsaW5lLWhlaWdodDogMTtcbiAgICAgIGZsb2F0OiBsZWZ0O1xuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgbGVmdDogMDtcbiAgICAgIHRvcDogNTAlO1xuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpOyB9XG4gICAgLnByb2R1Y3RzX19idXkgLmJ0biB7XG4gICAgICBmbG9hdDogcmlnaHQ7IH1cblxuLmNvbnRhaW5lciB7XG4gIG1heC13aWR0aDogMTAwJTtcbiAgbWFyZ2luLWxlZnQ6IGF1dG87XG4gIG1hcmdpbi1yaWdodDogYXV0bzsgfVxuICAuY29udGFpbmVyOmFmdGVyIHtcbiAgICBjb250ZW50OiBcIiBcIjtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBjbGVhcjogYm90aDsgfVxuXG5pbnB1dFt0eXBlPVwidGV4dFwiXSwgaW5wdXRbdHlwZT1cInBhc3N3b3JkXCJdIHtcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNhYmFiYWIgIWltcG9ydGFudDtcbiAgaGVpZ2h0OiAyNXB4OyB9XG5cbmh0bWwge1xuICBmb250LXNpemU6IDEwcHg7IH1cblxuLnNpZ251cCB7XG4gIGJhY2tncm91bmQ6ICMzNzM3Mzc7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTsgfVxuICAuc2lnbnVwX19jb250YWluZXIge1xuICAgIHdpZHRoOiA1MCU7XG4gICAgZmxvYXQ6IGxlZnQ7XG4gICAgbWFyZ2luLWxlZnQ6IGF1dG87XG4gICAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBsZWZ0OiAwO1xuICAgIHJpZ2h0OiAwO1xuICAgIHRvcDogNTAlO1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcbiAgICBoZWlnaHQ6IDYwMHB4O1xuICAgIGJhY2tncm91bmQ6IHdoaXRlO1xuICAgIG92ZXJmbG93OiBoaWRkZW47IH1cbiAgLnNpZ251cF9fZGF0YSB7XG4gICAgd2lkdGg6IDYzLjYzNjM2JTtcbiAgICBmbG9hdDogbGVmdDtcbiAgICBwYWRkaW5nOiAxMy42MzYzNiUgOS4wOTA5MSUgOS4wOTA5MSU7IH1cbiAgICAuc2lnbnVwX19kYXRhIGgyIHtcbiAgICAgIGZvbnQtc2l6ZTogM3JlbTsgfVxuICAgIC5zaWdudXBfX2RhdGEgcCB7XG4gICAgICBmb250LXNpemU6IDEuMnJlbTtcbiAgICAgIG1hcmdpbi10b3A6IDEycHg7IH1cbiAgLnNpZ251cF9fc3VibWl0OmhvdmVyIHtcbiAgICBjdXJzb3I6IHBvaW50ZXI7IH1cbiAgLnNpZ251cF9fY292ZXIge1xuICAgIHdpZHRoOiAzNi4zNjM2NCU7XG4gICAgZmxvYXQ6IGxlZnQ7IH1cbiAgLnNpZ251cF9fc291cmNlIHtcbiAgICB3aWR0aDogYXV0bztcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgb2JqZWN0LWZpdDogY292ZXI7IH1cbiAgLnNpZ251cF9faW5uZXIge1xuICAgIG1hcmdpbi10b3A6IDIwcHg7IH1cblxuLnAtaG9tZSB7XG4gIGJhY2tncm91bmQ6IHdoaXRlOyB9XG4gIC5wLWhvbWUgLm5hdmlnYXRpb24ge1xuICAgIHdpZHRoOiA5MS42NjY2NyU7XG4gICAgZmxvYXQ6IGxlZnQ7XG4gICAgbWFyZ2luLWxlZnQ6IGF1dG87XG4gICAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xuICAgIHBhZGRpbmctbGVmdDogMDtcbiAgICBwYWRkaW5nLXJpZ2h0OiAwO1xuICAgIGZsb2F0OiBub25lO1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIHRvcDogMzBweDtcbiAgICBoZWlnaHQ6IDUwcHg7IH1cbiAgLnAtaG9tZSAuY292ZXIge1xuICAgIHdpZHRoOiA5MS42NjY2NyU7XG4gICAgZmxvYXQ6IGxlZnQ7XG4gICAgbWFyZ2luLWxlZnQ6IGF1dG87XG4gICAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xuICAgIHBhZGRpbmctbGVmdDogMDtcbiAgICBwYWRkaW5nLXJpZ2h0OiAwO1xuICAgIGZsb2F0OiBub25lO1xuICAgIGxlZnQ6IDA7XG4gICAgcmlnaHQ6IDA7XG4gICAgaGVpZ2h0OiBjYWxjKDEwMHZoIC0gMTAwcHgpO1xuICAgIHRvcDogNTBweDtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiLi4vLi4vc3RhdGljL2ltZy9jb3Zlci5qcGdcIik7XG4gICAgYmFja2dyb3VuZC1zaXplOiBhdXRvIDEwMCU7IH1cbiAgICAucC1ob21lIC5jb3ZlciBoMSB7XG4gICAgICBjb2xvcjogd2hpdGU7XG4gICAgICB3aWR0aDogNDUuODMzMzMlO1xuICAgICAgZmxvYXQ6IGxlZnQ7XG4gICAgICBmb250LXNpemU6IDQuNXJlbTtcbiAgICAgIGxpbmUtaGVpZ2h0OiAxLjIyMjIyO1xuICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgICAgIGxldHRlci1zcGFjaW5nOiAwLjJyZW07XG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICBib3R0b206IDEyLjUlO1xuICAgICAgbGVmdDogMTIuNSU7IH1cbiIsIi5wLWZ1bGx7XG4gICAgaGVpZ2h0OjEwMHZoO1xuICAgIHdpZHRoOjEwMCU7XG59XG4uZm9ybS1pdGVte1xuICAgIG1hcmdpbi10b3A6IDMwcHg7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICBsYWJlbHtcbiAgICAgICAgQGV4dGVuZCAudWJ1bnR1LWI7XG4gICAgICAgIGZvbnQtc2l6ZToxLjJyZW07XG4gICAgICAgIGNvbG9yOiNiN2I3Yjc7XG4gICAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgfVxufVxuLmJ0bntcbiAgICBAZXh0ZW5kIC5yYWxlLXI7XG4gICAgZm9udC1zaXplOjEuNHJlbTtcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgIHBhZGRpbmc6IDEwcHggNDBweDtcbiAgICAmLXJlZHtcbiAgICAgICAgYmFja2dyb3VuZDp3aGl0ZTtcbiAgICAgICAgY29sb3I6I2RlMzgzODtcbiAgICAgICAgYm9yZGVyOjFweCBzb2xpZCAjZGUzODM4O1xuICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgfVxuICAgICYtYmxhY2t7XG4gICAgICAgIGJhY2tncm91bmQ6d2hpdGU7XG4gICAgICAgIGNvbG9yOmJsYWNrO1xuICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgICAgIGJvcmRlcjoxcHggc29saWQgYmxhY2s7XG4gICAgICAgIGZsb2F0OnJpZ2h0O1xuICAgIH1cbn1cbi5wcm9kdWN0c3tcbiAgICBAaW5jbHVkZSBzcGFuKDIyIG9mIDI0KTtcbiAgICBmbG9hdDpub25lO1xuICAgIG1hcmdpbjo4MHB4IGF1dG87XG4gICAgcGFkZGluZy1sZWZ0OjA7XG4gICAgcGFkZGluZy1yaWdodDowO1xuICAgICZfX2l0ZW17XG4gICAgICAgIEBpbmNsdWRlIGdhbGxlcnkoOCBvZiAyNCk7XG4gICAgICAgIHBhZGRpbmc6c3BhbigxLzIgb2YgMjQpO1xuICAgICAgICBoZWlnaHQ6IDQwMHB4O1xuICAgIH1cbiAgICAmX19pbWFnZXtcbiAgICAgICAgaGVpZ2h0OjIwMHB4O1xuICAgICAgICB3aWR0aDoxMDAlO1xuICAgIH1cbiAgICAmX19zb3VyY2V7XG4gICAgICAgIGhlaWdodDoxMDAlO1xuICAgICAgICB3aWR0aDoxMDAlO1xuICAgICAgICBvYmplY3QtZml0OiBjb3ZlcjtcbiAgICB9XG4gICAgJl9fdGl0bGV7XG4gICAgICAgIEBleHRlbmQgLnVidW50dS1iO1xuICAgICAgICBAaW5jbHVkZSBmb250LXNpemUoMnJlbSwgMi41cmVtKTtcbiAgICAgICAgbWFyZ2luLXRvcDogMjBweDtcbiAgICB9XG4gICAgJl9fZGVzY3tcbiAgICAgICAgQGV4dGVuZCAucmFsZS1yO1xuICAgICAgICBAaW5jbHVkZSBmb250LXNpemUoMS4ycmVtLCAycmVtKTtcbiAgICAgICAgbWFyZ2luOiAxNXB4IDAgMTBweDtcbiAgICAgICAgaGVpZ2h0OiAyMHB4O1xuICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgICAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbiAgICB9XG4gICAgJl9fYnV5e1xuICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIC5wcm9kdWN0c19fcHJpY2V7XG4gICAgICAgICAgICBAZXh0ZW5kIC51YnVudHUtYjtcbiAgICAgICAgICAgIEBpbmNsdWRlIGZvbnQtc2l6ZSgycmVtLCAycmVtKTtcbiAgICAgICAgICAgIGZsb2F0OmxlZnQ7XG4gICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICBsZWZ0OjA7XG4gICAgICAgICAgICB0b3A6NTAlO1xuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpO1xuICAgICAgICB9XG4gICAgICAgIC5idG57XG4gICAgICAgICAgICBmbG9hdDpyaWdodDtcbiAgICAgICAgfVxuICAgIH1cbn0iLCIvLyByZW0gU3VwcG9ydFxuLy8gPT09PT09PT09PT1cblxuLy8gcmVtXG4vLyAtLS1cbi8vIENoZWNrIGZvciBhbiBleGlzdGluZyBzdXBwb3J0IG1peGluLCBvciBvdXRwdXQgZGlyZWN0bHkuXG4vLyAtICRwcm9wICA6IDxjc3MgcHJvcGVydHk+XG4vLyAtICR2YWwgICA6IDxjc3MgdmFsdWU+XG5AbWl4aW4gc3VzeS1yZW0oXG4gICRwcm9wLFxuICAkdmFsXG4pIHtcbiAgJF9yZXFzOiAoXG4gICAgdmFyaWFibGU6IHJoeXRobS11bml0IHJlbS13aXRoLXB4LWZhbGxiYWNrLFxuICAgIG1peGluOiByZW0sXG4gICk7XG4gIEBpZiBzdXN5LXN1cHBvcnQocmVtLCAkX3JlcXMsICR3YXJuOiBmYWxzZSkgYW5kICRyaHl0aG0tdW5pdCA9PSByZW0ge1xuICAgIEBpbmNsdWRlIHJlbSgkcHJvcCwgJHZhbCk7XG4gIH0gQGVsc2Uge1xuICAgICN7JHByb3B9OiAkdmFsO1xuICB9XG59XG4iLCIvLyBTcGFuIFN5bnRheFxuLy8gPT09PT09PT09PT1cblxuLy8gU3BhbiBbbWl4aW5dXG4vLyAtLS0tLS0tLS0tLS1cbi8vIFNldCBhIHNwYW5uaW5nIGVsZW1lbnQgdXNpbmcgc2hvcnRoYW5kIHN5bnRheC5cbi8vIC0gJHNwYW4gIDogPHNwYW4+XG5AbWl4aW4gc3BhbihcbiAgJHNwYW5cbikge1xuICAkaW5zcGVjdDogJHNwYW47XG4gICRzcGFuOiBwYXJzZS1zcGFuKCRzcGFuKTtcbiAgJG91dHB1dDogc3Bhbi1tYXRoKCRzcGFuKTtcbiAgJG5lc3Rpbmc6IHN1c3ktZ2V0KHNwYW4sICRzcGFuKTtcbiAgJGNsZWFyOiBzdXN5LWdldChjbGVhciwgJHNwYW4pO1xuXG4gICRib3g6IHN1c3ktZ2V0KGJveC1zaXppbmcsICRzcGFuKTtcbiAgJGNvbnRlbnQtYm94OiBpZihzdXN5LWdldChnbG9iYWwtYm94LXNpemluZykgIT0gJ2JvcmRlci1ib3gnLCB0cnVlLCBmYWxzZSk7XG4gICRib3g6ICRib3ggb3IgaWYoaXMtaW5zaWRlKCRzcGFuKSBhbmQgJGNvbnRlbnQtYm94LCBib3JkZXItYm94LCBudWxsKTtcblxuICBAaWYgJGNsZWFyID09IGJyZWFrIHtcbiAgICBAaW5jbHVkZSBicmVhaztcbiAgfSBAZWxzZSBpZiAkY2xlYXIgPT0gbm9icmVhayB7XG4gICAgQGluY2x1ZGUgbm9icmVhaztcbiAgfVxuXG4gIEBpbmNsdWRlIHN1c3ktaW5zcGVjdChzcGFuLCAkaW5zcGVjdCk7XG4gIEBpbmNsdWRlIG91dHB1dCgoYm94LXNpemluZzogJGJveCkpO1xuICBAaW5jbHVkZSBmbG9hdC1zcGFuLW91dHB1dCgkb3V0cHV0Li4uKTtcblxuICBAaWYgdmFsaWQtY29sdW1ucygkbmVzdGluZywgc2lsZW50KSB7XG4gICAgQGluY2x1ZGUgbmVzdGVkKCRzcGFuKSB7IEBjb250ZW50OyB9XG4gIH0gQGVsc2Uge1xuICAgIEBjb250ZW50O1xuICB9XG59XG5cbi8vIFNwYW4gW2Z1bmN0aW9uXVxuLy8gLS0tLS0tLS0tLS0tLS0tXG4vLyBSZXR1cm4gdGhlIHdpZHRoIG9mIGEgc3Bhbi5cbi8vIC0gJHNwYW4gIDogPHNwYW4+XG5AZnVuY3Rpb24gc3BhbihcbiAgJHNwYW5cbikge1xuICBAcmV0dXJuIGdldC1zcGFuLXdpZHRoKCRzcGFuKTtcbn1cblxuLy8gU3BhbiBNYXRoXG4vLyAtLS0tLS0tLS1cbi8vIEdldCBhbGwgdGhlIHNwYW4gcmVzdWx0cy5cbi8vIC0gJHNwYW46IDxtYXA+XG5AZnVuY3Rpb24gc3Bhbi1tYXRoKFxuICAkc3BhblxuKSB7XG4gICRuZXN0ICAgICAgICAgICAgIDogaWYoc3VzeS1nZXQocm9sZSwgJHNwYW4pID09IG5lc3QsIHRydWUsIGZhbHNlKTtcbiAgJHNwbGl0LW5lc3QgICAgICAgOiBpZihpcy1zcGxpdCgkc3BhbikgYW5kICRuZXN0LCB0cnVlLCBmYWxzZSk7XG4gICRlZGdlICAgICAgICAgICAgIDogZ2V0LWVkZ2UoJHNwYW4pO1xuICAkbG9jYXRpb24gICAgICAgICA6IGdldC1sb2NhdGlvbigkc3Bhbik7XG5cbiAgJGZsb2F0ICAgICAgICAgICAgOiBmcm9tO1xuICAkcGFkZGluZy1iZWZvcmUgICA6IG51bGw7XG4gICRwYWRkaW5nLWFmdGVyICAgIDogbnVsbDtcbiAgJG1hcmdpbi1iZWZvcmUgICAgOiBudWxsO1xuICAkbWFyZ2luLWFmdGVyICAgICA6IG51bGw7XG5cbiAgLy8gY2FsY3VsYXRlIHdpZHRoc1xuICAkc3ByZWFkOiBpbmRleChtYXAtdmFsdWVzKCRzcGFuKSwgc3ByZWFkKTtcbiAgJHNwYW46IGlmKCRzcGxpdC1uZXN0IGFuZCBub3QoJHNwcmVhZCksIG1hcC1tZXJnZSgkc3BhbiwgKHNwcmVhZDogd2lkZSkpLCAkc3Bhbik7XG4gICR3aWR0aDogZ2V0LXNwYW4td2lkdGgoJHNwYW4pO1xuICAkZ3V0dGVyczogZ2V0LWd1dHRlcnMoJHNwYW4pO1xuXG4gIC8vIGFwcGx5IGd1dHRlcnNcbiAgQGlmIGlzLWluc2lkZSgkc3Bhbikge1xuICAgIEBpZiBub3Qoc3VzeS1nZXQocm9sZSwgJHNwYW4pKSB7XG4gICAgICAkcGFkZGluZy1iZWZvcmU6IG1hcC1nZXQoJGd1dHRlcnMsIGJlZm9yZSk7XG4gICAgICAkcGFkZGluZy1hZnRlcjogbWFwLWdldCgkZ3V0dGVycywgYWZ0ZXIpO1xuICAgIH1cbiAgfSBAZWxzZSB7XG4gICAgQGlmIG5vdCgkc3BsaXQtbmVzdCkge1xuICAgICAgJG1hcmdpbi1iZWZvcmU6IG1hcC1nZXQoJGd1dHRlcnMsIGJlZm9yZSk7XG4gICAgICAkbWFyZ2luLWFmdGVyOiBtYXAtZ2V0KCRndXR0ZXJzLCBhZnRlcik7XG4gICAgfVxuICB9XG5cbiAgLy8gc3BlY2lhbCBtYXJnaW4gaGFuZGxpbmdcbiAgQGlmIHN1c3ktZ2V0KG91dHB1dCwgJHNwYW4pID09IGlzb2xhdGUgYW5kICRsb2NhdGlvbiB7XG4gICAgJG1hcmdpbi1iZWZvcmU6IGdldC1pc29sYXRpb24oJHNwYW4pO1xuICAgICRtYXJnaW4tYWZ0ZXI6IC0xMDAlO1xuICB9IEBlbHNlIGlmICRlZGdlIHtcbiAgICAkaXMtc3BsaXQ6IGlzLXNwbGl0KCRzcGFuKTtcbiAgICAkcG9zOiBzdXN5LWdldChndXR0ZXItcG9zaXRpb24sICRzcGFuKTtcblxuICAgIEBpZiAkZWRnZSA9PSBsYXN0IHtcbiAgICAgICRmbG9hdDogc3VzeS1nZXQobGFzdC1mbG93LCAkc3Bhbik7XG4gICAgfVxuXG4gICAgQGlmIG5vdCgkaXMtc3BsaXQpIHtcbiAgICAgIEBpZiAkZWRnZSA9PSBmdWxsIG9yICgkZWRnZSA9PSBmaXJzdCBhbmQgJHBvcyA9PSBiZWZvcmUpIHtcbiAgICAgICAgJG1hcmdpbi1iZWZvcmU6IDA7XG4gICAgICB9XG4gICAgICBAaWYgJGVkZ2UgPT0gZnVsbCBvciAoJGVkZ2UgPT0gbGFzdCBhbmQgJHBvcyA9PSBhZnRlcikge1xuICAgICAgICAkbWFyZ2luLWFmdGVyOiAwO1xuICAgICAgfVxuICAgIH1cblxuICB9XG5cbiAgQHJldHVybiAoXG4gICAgd2lkdGggICAgICAgICAgIDogJHdpZHRoLFxuICAgIGZsb2F0ICAgICAgICAgICA6ICRmbG9hdCxcbiAgICBtYXJnaW4tYmVmb3JlICAgOiAkbWFyZ2luLWJlZm9yZSxcbiAgICBtYXJnaW4tYWZ0ZXIgICAgOiAkbWFyZ2luLWFmdGVyLFxuICAgIHBhZGRpbmctYmVmb3JlICA6ICRwYWRkaW5nLWJlZm9yZSxcbiAgICBwYWRkaW5nLWFmdGVyICAgOiAkcGFkZGluZy1hZnRlcixcbiAgICBmbG93ICAgICAgICAgICAgOiBzdXN5LWdldChmbG93LCAkc3BhbiksXG4gICk7XG59XG5cbi8vIEdldCBTcGFuIFdpZHRoXG4vLyAtLS0tLS0tLS0tLS0tLVxuLy8gUmV0dXJuIHNwYW4gd2lkdGguXG4vLyAtICRzcGFuOiA8bWFwPlxuQGZ1bmN0aW9uIGdldC1zcGFuLXdpZHRoKFxuICAkc3BhblxuKSB7XG4gICRzcGFuICAgICA6IHBhcnNlLXNwYW4oJHNwYW4pO1xuXG4gICRuICAgICAgICA6IHN1c3ktZ2V0KHNwYW4sICRzcGFuKTtcbiAgJGxvY2F0aW9uIDogZ2V0LWxvY2F0aW9uKCRzcGFuKTtcbiAgJGNvbHVtbnMgIDogc3VzeS1nZXQoY29sdW1ucywgJHNwYW4pO1xuICAkZ3V0dGVycyAgOiBzdXN5LWdldChndXR0ZXJzLCAkc3Bhbik7XG4gICRzcHJlYWQgICA6IHN1c3ktZ2V0KHNwcmVhZCwgJHNwYW4pO1xuXG4gICRjb250ZXh0ICA6IG51bGw7XG4gICRzcGFuLXN1bSA6IG51bGw7XG4gICR3aWR0aCAgICA6IG51bGw7XG5cbiAgQGlmICRuID09ICdmdWxsJyB7XG4gICAgJHBvczogc3VzeS1nZXQoZ3V0dGVyLXBvc2l0aW9uLCAkc3Bhbik7XG4gICAgJHJvbGU6IHN1c3ktZ2V0KHJvbGUsICRzcGFuKTtcbiAgICAkbjogaWYoJHBvcyA9PSBzcGxpdCBhbmQgJHJvbGUgIT0gbmVzdCwgc3VzeS1jb3VudCgkY29sdW1ucyksIDEwMCUpO1xuICB9XG5cbiAgQGlmIHR5cGUtb2YoJG4pICE9IG51bWJlciB7XG4gICAgQHdhcm4gXCIoI3t0eXBlLW9mKCRuKX0pICN7JG59IGlzIG5vdCBhIHZhbGlkIHNwYW4uXCI7XG4gIH0gQGVsc2UgaWYgdW5pdGxlc3MoJG4pIHtcbiAgICAkY29udGV4dDogc3VzeS1zdW0oJGNvbHVtbnMsICRndXR0ZXJzLCBpZihpcy1zcGxpdCgkc3BhbiksIHdpZGUsIG5hcnJvdykpO1xuICAgICRzcHJlYWQ6IGlmKGlzLWluc2lkZSgkc3BhbiksICRzcHJlYWQgb3Igd2lkZSwgJHNwcmVhZCk7XG4gICAgJHNwYW4tc3VtOiBzdXN5KCRuLCAkbG9jYXRpb24sICRjb2x1bW5zLCAkZ3V0dGVycywgJHNwcmVhZCk7XG5cbiAgICAkX21hdGg6IHN1c3ktZ2V0KG1hdGgsICRzcGFuKTtcbiAgICAkX2NvbHVtbi13aWR0aDogc3VzeS1nZXQoY29sdW1uLXdpZHRoLCAkc3Bhbik7XG4gICAgQGlmICRfbWF0aCA9PSBzdGF0aWMge1xuICAgICAgJHdpZHRoOiAkc3Bhbi1zdW0gKiB2YWxpZC1jb2x1bW4tbWF0aCgkX21hdGgsICRfY29sdW1uLXdpZHRoKTtcbiAgICB9IEBlbHNlIHtcbiAgICAgICR3aWR0aDogcGVyY2VudGFnZSgkc3Bhbi1zdW0gLyAkY29udGV4dCk7XG4gICAgfVxuICB9IEBlbHNlIHtcbiAgICAkd2lkdGg6ICRuO1xuICB9XG5cbiAgQHJldHVybiAkd2lkdGg7XG59XG4iLCIvLyBEaXJlY3Rpb24gSGVscGVyc1xuLy8gPT09PT09PT09PT09PT09PT1cblxuLy8gU3VzeSBGbG93IERlZmF1bHRzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS1cbi8vIC0gUFJJVkFURVxuQGluY2x1ZGUgc3VzeS1kZWZhdWx0cygoXG4gIGZsb3c6IGx0cixcbikpO1xuXG4vLyBHZXQgRGlyZWN0aW9uXG4vLyAtLS0tLS0tLS0tLS0tXG4vLyBSZXR1cm4gdGhlICdmcm9tJyBvciAndG8nIGRpcmVjdGlvbiBvZiBhIGx0ciBvciBydGwgZmxvdy5cbi8vIC0gWyRmbG93XSAgOiBsdHIgfCBydGxcbi8vIC0gWyRrZXldICAgOiBmcm9tIHwgdG9cbkBmdW5jdGlvbiBnZXQtZGlyZWN0aW9uKFxuICAkZmxvdzogbWFwLWdldCgkc3VzeS1kZWZhdWx0cywgZmxvdyksXG4gICRrZXk6IGZyb21cbikge1xuICAkcmV0dXJuOiBpZigkZmxvdyA9PSBydGwsIChmcm9tOiByaWdodCwgdG86IGxlZnQpLCAoZnJvbTogbGVmdCwgdG86IHJpZ2h0KSk7XG4gIEByZXR1cm4gbWFwLWdldCgkcmV0dXJuLCAka2V5KTtcbn1cblxuLy8gVG9cbi8vIC0tXG4vLyBSZXR1cm4gdGhlICd0bycgZGlyZWN0aW9uIG9mIGEgZmxvd1xuLy8gLSBbJGZsb3ddICA6IGx0ciB8IHJ0bFxuQGZ1bmN0aW9uIHRvKFxuICAkZmxvdzogbWFwLWdldCgkc3VzeS1kZWZhdWx0cywgZmxvdylcbikge1xuICBAcmV0dXJuIGdldC1kaXJlY3Rpb24oJGZsb3csIHRvKTtcbn1cblxuLy8gRnJvbVxuLy8gLS0tLVxuLy8gUmV0dXJuIHRoZSAnZnJvbScgZGlyZWN0aW9uIG9mIGEgZmxvd1xuLy8gLSBbJGZsb3ddICA6IGx0ciB8IHJ0bFxuQGZ1bmN0aW9uIGZyb20oXG4gICRmbG93OiBtYXAtZ2V0KCRzdXN5LWRlZmF1bHRzLCBmbG93KVxuKSB7XG4gIEByZXR1cm4gZ2V0LWRpcmVjdGlvbigkZmxvdywgZnJvbSk7XG59XG4iLCIvLyBJc29sYXRpb24gU3ludGF4XG4vLyA9PT09PT09PT09PT09PT09XG5cblxuLy8gSXNvbGF0ZSBbTWl4aW5dXG4vLyAtLS0tLS0tLS0tLS0tLS1cbi8vIFNldCBpc29sYXRpb24gYXMgYW4gb3ZlcnJpZGUuXG4vLyAtICRsb2NhdGlvbjogPHNwYW4+XG5AbWl4aW4gaXNvbGF0ZShcbiAgJGlzb2xhdGU6IDFcbikge1xuICAkaW5zcGVjdDogJGlzb2xhdGU7XG5cbiAgJG91dHB1dDogKFxuICAgIHB1c2g6IGlzb2xhdGUoJGlzb2xhdGUpLFxuICAgIGZsb3c6IHN1c3ktZ2V0KGZsb3csICRpc29sYXRlKSxcbiAgKTtcblxuICBAaW5jbHVkZSBzdXN5LWluc3BlY3QoaXNvbGF0ZSwgJGluc3BlY3QpO1xuICBAaW5jbHVkZSBpc29sYXRlLW91dHB1dCgkb3V0cHV0Li4uKTtcbn1cblxuXG4vLyBJc29sYXRlIFtmdW5jdGlvbl1cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUmV0dXJuIGFuIGlzb2xhdGlvbiBvZmZzZXQgd2lkdGguXG4vLyAtICRsb2NhdGlvbjogPHNwYW4+XG5AZnVuY3Rpb24gaXNvbGF0ZShcbiAgJGlzb2xhdGU6IDFcbikge1xuICAkaXNvbGF0ZTogcGFyc2Utc3BhbigkaXNvbGF0ZSk7XG4gICRpc29sYXRpb246IHN1c3ktZ2V0KHNwYW4sICRpc29sYXRlKTtcblxuICBAaWYgJGlzb2xhdGlvbiBhbmQgbm90KGdldC1sb2NhdGlvbigkaXNvbGF0ZSkpIHtcbiAgICAkbmV3OiAoXG4gICAgICBzcGFuOiBudWxsLFxuICAgICAgbG9jYXRpb246ICRpc29sYXRpb24sXG4gICAgKTtcbiAgICAkaXNvbGF0ZTogbWFwLW1lcmdlKCRpc29sYXRlLCAkbmV3KTtcbiAgfVxuXG4gIEByZXR1cm4gZ2V0LWlzb2xhdGlvbigkaXNvbGF0ZSk7XG59XG5cblxuLy8gR2V0IElzb2xhdGlvblxuLy8gLS0tLS0tLS0tLS0tLVxuLy8gUmV0dXJuIHRoZSBpc29sYXRpb24gb2Zmc2V0IHdpZHRoXG4vLyAtICRpbnB1dDogPG1hcD5cbkBmdW5jdGlvbiBnZXQtaXNvbGF0aW9uKFxuICAkaW5wdXRcbikge1xuICAkbG9jYXRpb24gICA6IGdldC1sb2NhdGlvbigkaW5wdXQpO1xuICAkY29sdW1ucyAgICA6IHN1c3ktZ2V0KGNvbHVtbnMsICRpbnB1dCk7XG4gICR3aWR0aCAgICAgIDogbnVsbDtcblxuICBAaWYgdHlwZS1vZigkbG9jYXRpb24pID09IG51bWJlciBhbmQgbm90KHVuaXRsZXNzKCRsb2NhdGlvbikpIHtcbiAgICAkd2lkdGg6ICRsb2NhdGlvbjtcbiAgfSBAZWxzZSBpZiAkbG9jYXRpb24ge1xuICAgICRwdXNoOiAkbG9jYXRpb24gLSAxO1xuICAgIEBpZiAkcHVzaCA+IDAge1xuICAgICAgJHB1c2g6IG1hcC1tZXJnZSgkaW5wdXQsIChcbiAgICAgICAgc3BhbjogJHB1c2gsXG4gICAgICAgIGxvY2F0aW9uOiAxLFxuICAgICAgICBzcHJlYWQ6IHdpZGUsXG4gICAgICApKTtcbiAgICAgICR3aWR0aDogZ2V0LXNwYW4td2lkdGgoJHB1c2gpO1xuICAgIH1cbiAgfVxuXG4gIEBpZiBzdXN5LWdldChndXR0ZXItcG9zaXRpb24sICRpbnB1dCkgPT0gc3BsaXRcbiAgICAgIGFuZCBzdXN5LWdldChndXR0ZXJzLCAkaW5wdXQpID4gMCB7XG4gICAgJHdpZHRoOiBpZigkd2lkdGggPT0gbnVsbCwgZ3V0dGVycygkaW5wdXQpLCAkd2lkdGggKyBndXR0ZXJzKCRpbnB1dCkpO1xuICB9XG5cbiAgQHJldHVybiAkd2lkdGggb3IgMDtcbn1cbiIsIi8vIEdhbGxlcnkgU3ludGF4XG4vLyA9PT09PT09PT09PT09PVxuXG4vLyBHYWxsZXJ5XG4vLyAtLS0tLS0tXG4vLyBDcmVhdGUgYW4gaXNvbGF0ZWQgZ2FsbGVyeVxuLy8gLSAkc3BhbiAgICAgICAgOiA8c3Bhbj5cbi8vIC0gWyRzZWxlY3Rvcl0gIDogY2hpbGQgfCBvZi10eXBlXG5AbWl4aW4gZ2FsbGVyeShcbiAgJHNwYW4sXG4gICRzZWxlY3RvcjogY2hpbGRcbikge1xuICAkaW5zcGVjdCAgICA6ICRzcGFuO1xuICAkc3BhbiAgICAgICA6IHBhcnNlLXNwYW4oJHNwYW4pO1xuICAkc3BhbiAgICAgICA6IG1hcC1tZXJnZSgkc3BhbiwgKGxvY2F0aW9uOiAxKSk7XG5cbiAgJG4gICAgICAgICAgICA6IHN1c3ktZ2V0KHNwYW4sICRzcGFuKTtcbiAgJGNvbHVtbnMgICAgICA6IHN1c3ktZ2V0KGNvbHVtbnMsICRzcGFuKTtcbiAgJGNvbnRleHQgICAgICA6IHN1c3ktY291bnQoJGNvbHVtbnMpO1xuICAkZmxvdyAgICAgICAgIDogc3VzeS1nZXQoZmxvdywgJHNwYW4pO1xuXG4gICRpbnNpZGUgICAgICAgOiBpcy1pbnNpZGUoJHNwYW4pO1xuICAkZnJvbSAgICAgICAgIDogZnJvbSgkZmxvdyk7XG4gICRsaW5lICAgICAgICAgOiBmbG9vcigkY29udGV4dCAvICRuKTtcbiAgJHN5bW1ldHJpY2FsICA6IGlzLXN5bW1ldHJpY2FsKCRjb2x1bW5zKTtcblxuICAkb3V0cHV0OiAoXG4gICAgd2lkdGggICAgICAgICAgICAgOiBudWxsLFxuICAgIGZsb2F0ICAgICAgICAgICAgIDogZnJvbSxcbiAgICBtYXJnaW4tYmVmb3JlICAgICA6IG51bGwsXG4gICAgbWFyZ2luLWFmdGVyICAgICAgOiBudWxsLFxuICAgIHBhZGRpbmctYmVmb3JlICAgIDogbnVsbCxcbiAgICBwYWRkaW5nLWFmdGVyICAgICA6IG51bGwsXG4gICAgZmxvdyAgICAgICAgICAgICAgOiAkZmxvdyxcbiAgKTtcblxuICBAaWYgJGluc2lkZSB7XG4gICAgJGd1dHRlcnM6IGdldC1ndXR0ZXJzKCRzcGFuKTtcbiAgICAkb3V0cHV0OiBtYXAtbWVyZ2UoJG91dHB1dCwgKFxuICAgICAgcGFkZGluZy1iZWZvcmU6IG1hcC1nZXQoJGd1dHRlcnMsIGJlZm9yZSksXG4gICAgICBwYWRkaW5nLWFmdGVyOiBtYXAtZ2V0KCRndXR0ZXJzLCBhZnRlciksXG4gICAgKSk7XG4gIH1cblxuICBAaWYgJHN5bW1ldHJpY2FsIHtcbiAgICAkb3V0cHV0OiBtYXAtbWVyZ2UoJG91dHB1dCwgKHdpZHRoOiBnZXQtc3Bhbi13aWR0aCgkc3BhbikpKTtcbiAgfVxuXG4gICRib3ggICAgICAgICAgOiBzdXN5LWdldChib3gtc2l6aW5nLCAkc3Bhbik7XG4gICRnbG9iYWwtYm94ICAgOiBpZihzdXN5LWdldChnbG9iYWwtYm94LXNpemluZykgPT0gJ2JvcmRlci1ib3gnLCB0cnVlLCBmYWxzZSk7XG5cbiAgQGluY2x1ZGUgc3VzeS1pbnNwZWN0KGdhbGxlcnksICRpbnNwZWN0KTtcblxuICAvLyBDb2xsZWN0aXZlIE91dHB1dFxuICBAaWYgJGJveCA9PSBib3JkZXItYm94IG9yICgkaW5zaWRlIGFuZCBub3QoJGJveCkgYW5kIG5vdCgkZ2xvYmFsLWJveCkpIHtcbiAgICBAaW5jbHVkZSBvdXRwdXQoKGJveC1zaXppbmc6IGJvcmRlci1ib3gpKTtcbiAgfSBAZWxzZSBpZiAkYm94ID09IGNvbnRlbnQtYm94IHtcbiAgICBAaW5jbHVkZSBvdXRwdXQoKGJveC1zaXppbmc6IGNvbnRlbnQtYm94KSk7XG4gIH1cblxuICBAaW5jbHVkZSBmbG9hdC1zcGFuLW91dHB1dCgkb3V0cHV0Li4uKTtcblxuICAvLyBJbmRpdmlkdWFsIExvb3BcbiAgQGZvciAkaXRlbSBmcm9tIDEgdGhyb3VnaCAkbGluZSB7XG4gICAgJG50aDogJyN7JGxpbmV9biArICN7JGl0ZW19JztcbiAgICAmOm50aC0jeyRzZWxlY3Rvcn0oI3skbnRofSkge1xuICAgICAgLy8gSW5kaXZpZHVhbCBQcmVwXG4gICAgICAkb3V0cHV0OiAoXG4gICAgICAgIHdpZHRoICAgICAgICAgICAgIDogaWYoJHN5bW1ldHJpY2FsLCBudWxsLCBnZXQtc3Bhbi13aWR0aCgkc3BhbikpLFxuICAgICAgICBmbG9hdCAgICAgICAgICAgICA6IG51bGwsXG4gICAgICAgIG1hcmdpbi1iZWZvcmUgICAgIDogZ2V0LWlzb2xhdGlvbigkc3BhbiksXG4gICAgICAgIG1hcmdpbi1hZnRlciAgICAgIDogLTEwMCUsXG4gICAgICAgIHBhZGRpbmctYmVmb3JlICAgIDogbnVsbCxcbiAgICAgICAgcGFkZGluZy1hZnRlciAgICAgOiBudWxsLFxuICAgICAgICBmbG93ICAgICAgICAgICAgICA6ICRmbG93LFxuICAgICAgKTtcblxuICAgICAgLy8gSW5kaXZpZHVhbCBPdXRwdXRcbiAgICAgIEBpbmNsdWRlIGZsb2F0LXNwYW4tb3V0cHV0KCRvdXRwdXQuLi4pO1xuXG4gICAgICBAaWYgZ2V0LWVkZ2UoJHNwYW4pID09IGZpcnN0IHtcbiAgICAgICAgQGluY2x1ZGUgYnJlYWs7XG4gICAgICAgIEBpbmNsdWRlIGZpcnN0KCRzcGFuKTtcbiAgICAgIH0gQGVsc2Uge1xuICAgICAgICBAaW5jbHVkZSBub2JyZWFrO1xuICAgICAgfVxuXG4gICAgICAvLyBJbmRpdmlkdWFsIExvY2F0aW9uIEluY3JlbWVudFxuICAgICAgJGxvY2F0aW9uOiBnZXQtbG9jYXRpb24oJHNwYW4pICsgJG47XG4gICAgICAkbG9jYXRpb246IGlmKCRsb2NhdGlvbiA+ICRjb250ZXh0LCAxLCAkbG9jYXRpb24pO1xuICAgICAgJHNwYW46IG1hcC1tZXJnZSgkc3BhbiwgKGxvY2F0aW9uOiAkbG9jYXRpb24pKTtcbiAgICB9XG4gIH1cbn1cbiIsIi8vIFJvdyBTdGFydCAmIEVuZFxuLy8gPT09PT09PT09PT09PT09XG5cbi8vIEJyZWFrXG4vLyAtLS0tLVxuLy8gQXBwbHkgdG8gYW55IGVsZW1lbnQgdGhhdCBzaG91bGQgZm9yY2UgYSBsaW5lIGJyZWFrLlxuQG1peGluIGJyZWFrIHtcbiAgQGluY2x1ZGUgb3V0cHV0KChjbGVhcjogYm90aCkpO1xufVxuXG5cbi8vIE5vQnJlYWtcbi8vIC0tLS0tLS1cbi8vIENhbmNlbCB0aGUgYnJlYWsoKSBlZmZlY3QsIGUuZy4gd2hlbiB1c2luZyBtZWRpYSBxdWVyaWVzLlxuQG1peGluIG5vYnJlYWsge1xuICBAaW5jbHVkZSBvdXRwdXQoKGNsZWFyOiBub25lKSk7XG59XG5cblxuLy8gRnVsbFxuLy8gLS0tLVxuLy8gLSBbJGNvbnRleHRdOiA8bGF5b3V0IHNob3J0aGFuZD5cbkBtaXhpbiBmdWxsKFxuICAkY29udGV4dDogJHN1c3lcbikge1xuICAkaW5zcGVjdCA6ICRjb250ZXh0O1xuICBAaW5jbHVkZSBzdXN5LWluc3BlY3QoZnVsbCwgJGluc3BlY3QpO1xuICBAaW5jbHVkZSBzcGFuKGZ1bGwgb2YgcGFyc2UtZ3JpZCgkY29udGV4dCkgYnJlYWspO1xufVxuXG5cbi8vIEZpcnN0XG4vLyAtLS0tLVxuLy8gLSBbJGNvbnRleHRdOiA8c2V0dGluZ3M+XG5AbWl4aW4gZmlyc3QoXG4gICRjb250ZXh0OiAkc3VzeVxuKSB7XG4gICRpbnNwZWN0ICA6ICRjb250ZXh0O1xuICAkY29udGV4dCAgOiBwYXJzZS1ncmlkKCRjb250ZXh0KTtcbiAgJGZsb3cgICAgIDogc3VzeS1nZXQoZmxvdywgJGNvbnRleHQpO1xuXG4gIEBpbmNsdWRlIHN1c3ktaW5zcGVjdChmaXJzdCwgJGluc3BlY3QpO1xuICBAaWYgbm90KGlzLXNwbGl0KCRjb250ZXh0KSkge1xuICAgIEBpbmNsdWRlIGZsb2F0LWZpcnN0KCRmbG93KTtcbiAgfVxufVxuXG5AbWl4aW4gYWxwaGEoXG4gICRjb250ZXh0OiAkc3VzeVxuKSB7XG4gIEBpbmNsdWRlIGZpcnN0KCRjb250ZXh0KTtcbn1cblxuXG4vLyBMYXN0XG4vLyAtLS0tXG4vLyAtIFskY29udGV4dF06IDxzZXR0aW5ncz5cbkBtaXhpbiBsYXN0KFxuICAkY29udGV4dDogJHN1c3lcbikge1xuICAkaW5zcGVjdCAgOiAkY29udGV4dDtcbiAgJGNvbnRleHQgIDogcGFyc2UtZ3JpZCgkY29udGV4dCk7XG5cbiAgQGluY2x1ZGUgc3VzeS1pbnNwZWN0KGxhc3QsICRpbnNwZWN0KTtcblxuICAkb3V0cHV0OiAoXG4gICAgZmxvdzogc3VzeS1nZXQoZmxvdywgJGNvbnRleHQpLFxuICAgIGxhc3QtZmxvdzogc3VzeS1nZXQobGFzdC1mbG93LCAkY29udGV4dCksXG4gICAgbWFyZ2luOiBpZihpcy1zcGxpdCgkY29udGV4dCksIG51bGwsIDApLFxuICApO1xuXG4gIEBpbmNsdWRlIGZsb2F0LWxhc3QoJG91dHB1dC4uLik7XG59XG5cbkBtaXhpbiBvbWVnYShcbiAgJGNvbnRleHQ6ICRzdXN5XG4pIHtcbiAgQGluY2x1ZGUgbGFzdCgkY29udGV4dCk7XG59XG5cblxuLy8gR2V0IEVkZ2Vcbi8vIC0tLS0tLS0tXG4vLyBDYWxjdWxhdGUgZWRnZSB2YWx1ZSBiYXNlZCBvbiBsb2NhdGlvbiwgaWYgcG9zc2libGVcbkBmdW5jdGlvbiBnZXQtZWRnZShcbiAgJHNwYW5cbikge1xuICAkc3BhbiAgICAgICA6IHBhcnNlLXNwYW4oJHNwYW4pO1xuICAkZWRnZSAgICAgICA6IHN1c3ktZ2V0KGVkZ2UsICRzcGFuKTtcblxuICBAaWYgbm90KCRlZGdlKSB7XG4gICAgJGNvdW50OiBzdXN5LWNvdW50KHN1c3ktZ2V0KGNvbHVtbnMsICRzcGFuKSk7XG4gICAgJGxvY2F0aW9uOiBzdXN5LWdldChsb2NhdGlvbiwgJHNwYW4pO1xuICAgICRuOiBzdXN5LWdldChzcGFuLCAkc3Bhbik7XG5cbiAgICAkbnVtYmVyOiBpZih0eXBlLW9mKCRsb2NhdGlvbikgPT0gbnVtYmVyLCB0cnVlLCBmYWxzZSk7XG4gICAgJGluZGV4OiBpZigkbnVtYmVyIGFuZCB1bml0bGVzcygkbG9jYXRpb24pLCB0cnVlLCBmYWxzZSk7XG5cbiAgICBAaWYgJG4gPT0gJGNvdW50IHtcbiAgICAgICRlZGdlOiBmdWxsO1xuICAgIH0gQGVsc2UgaWYgJGxvY2F0aW9uIGFuZCAkbiBhbmQgJGluZGV4IHtcbiAgICAgIEBpZiAkbG9jYXRpb24gPT0gMSB7XG4gICAgICAgICRlZGdlOiBpZigkbiA9PSAkY291bnQsIGZ1bGwsIGZpcnN0KTtcbiAgICAgIH0gQGVsc2UgaWYgJGxvY2F0aW9uICsgJG4gLSAxID09ICRjb3VudCB7XG4gICAgICAgICRlZGdlOiBsYXN0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIEBpZiAkZWRnZSA9PSBhbHBoYSBvciAkZWRnZSA9PSBvbWVnYSB7XG4gICAgJGVkZ2U6IGlmKCRlZGdlID09IGFscGhhLCBmaXJzdCwgbGFzdCk7XG4gIH1cblxuICBAcmV0dXJuICRlZGdlO1xufVxuXG5cbi8vIEdldCBMb2NhdGlvblxuLy8gLS0tLS0tLS0tLS0tXG4vLyBDYWxjdWxhdGUgbG9jYXRpb24gdmFsdWUgYmFzZWQgb24gZWRnZSwgaWYgcG9zc2libGVcbkBmdW5jdGlvbiBnZXQtbG9jYXRpb24oXG4gICRzcGFuXG4pIHtcbiAgJHNwYW4gICAgICAgOiBwYXJzZS1zcGFuKCRzcGFuKTtcbiAgJGxvY2F0aW9uICAgOiBzdXN5LWdldChsb2NhdGlvbiwgJHNwYW4pO1xuICAkZWRnZSAgICAgICA6IGdldC1lZGdlKCRzcGFuKTtcbiAgJG4gICAgICAgICAgOiBzdXN5LWdldChzcGFuLCAkc3Bhbik7XG5cbiAgQGlmICRlZGdlIGFuZCBub3QoJGxvY2F0aW9uKSBhbmQgdHlwZS1vZigkbikgPT0gbnVtYmVyIGFuZCB1bml0bGVzcygkbikge1xuICAgIEBpZiAkZWRnZSA9PSBmaXJzdCB7XG4gICAgICAkbG9jYXRpb246IDE7XG4gICAgfSBAZWxzZSBpZiAkZWRnZSA9PSBsYXN0IHtcbiAgICAgICRsb2NhdGlvbjogc3VzeS1jb3VudChzdXN5LWdldChjb2x1bW5zLCAkc3BhbikpIC0gJG4gKyAxO1xuICAgIH1cbiAgfVxuXG4gIEByZXR1cm4gJGxvY2F0aW9uXG59XG4iLCIvL1Nhc3MgTWl4aW4gZm9yIHR5cGVraXQgdmFyaWF0aW9uLXNwZWNpZmljIGZvbnQtZmFtaWx5IG5hbWVzXG4vL1R5cGVraXQgSUU2LTggU3VwcG9ydCAoaHR0cDovL2hlbHAudHlwZWtpdC5jb20vY3VzdG9tZXIvcG9ydGFsL2FydGljbGVzLzY4NTUtVXNpbmctbXVsdGlwbGUtd2VpZ2h0cy1hbmQtc3R5bGVzKVxuXG4vL0Jhc2VkIG9uIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL3BsYXBpZXIvMzk4ODk4NFxuXG4kYXJpYWw6IEFyaWFsLCBzZXJpZiwgc2Fucy1zZXJpZjtcbiRnZW9yZ2lhOiBHZW9yZ2lhLCBcIlRpbWVzIE5ldyBSb21hblwiLCBzZXJpZjtcblxuLy8gTXVzdCBpbmNsdWRlIGZhbGxiYWNrcyBmb3IgRUFDSCB0eXBla2l0IGZvbnQg4oCUIHNldCB0aGVtIGVhY2ggYXMgdmFyaWFibGVzXG4vLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8vXG4kdHlwZWtpdC1mb250czogICAgIFwiYnJpbS1uYXJyb3ctY29tYmluZWQtM1wiLCBcInNhaWxcIiwgXCJhZGVsbGUtc2Fuc1wiOyAgLy8gaW5kZXggWzEsIDIsIDNdXG4kdHlwZWtpdC1mYWxsYmFja3M6ICAkZ2VvcmdpYSwgJGdlb3JnaWEsICAkYXJpYWw7XG5cblxuQG1peGluIGZvbnQoJHdlaWdodDogNDAwLCAkc3R5bGU6IG5vcm1hbCwgJGZvbnQ6IDEpIHtcbiAgICAkZm9udC13ZWlnaHQ6ICR3ZWlnaHQ7XG4gICAgJGZvbnQtc3R5bGU6ICAkc3R5bGU7XG5cbiAgICAvLyBUcmFuc2xhdGUgV2VpZ2h0XG5cbiAgICBAaWYgKCR3ZWlnaHQgPT0gNDAwKSBvciAoJHdlaWdodCA9PSBub3JtYWwpIG9yICgkd2VpZ2h0ID09IHJlZ3VsYXIpIHtcbiAgICAgICAgJHdlaWdodDogNDtcbiAgICB9XG4gICAgQGlmICgkd2VpZ2h0ID09IDcwMCkgb3IgKCR3ZWlnaHQgPT0gYm9sZCkge1xuICAgICAgICAkd2VpZ2h0OiA3O1xuICAgIH1cblxuICAgIC8vIFRyYW5zbGF0ZSBTdHlsZVxuICAgIEBpZiAkc3R5bGUgPT0gbm9ybWFsIHtcbiAgICAgICAgJHN0eWxlOiBuO1xuICAgIH1cbiAgICBAZWxzZSBpZiAkc3R5bGUgPT0gaXRhbGljIHtcbiAgICAgICAgJHN0eWxlOiBpO1xuICAgIH1cblxuICAgIC8vIEFzc2VtYmxlICRmb250LWZhbWlseVxuICAgICRwcmltYXJ5LWZvbnQ6ICAgbnRoKCR0eXBla2l0LWZvbnRzLCAkZm9udCkgKyBcIi1cIiArICRzdHlsZSArICR3ZWlnaHQ7XG4gICAgJHNlY29uZGFyeS1mb250OiBudGgoJHR5cGVraXQtZm9udHMsICRmb250KTtcbiAgICAkZmFsbGJhY2stZm9udHM6IG50aCgkdHlwZWtpdC1mYWxsYmFja3MsICRmb250KTtcbiAgICAkZm9udC1mYW1pbHk6ICAgIHF1b3RlKCRwcmltYXJ5LWZvbnQpLCBxdW90ZSgkc2Vjb25kYXJ5LWZvbnQpLCAkZmFsbGJhY2stZm9udHM7XG5cbiAgICBmb250LWZhbWlseTogJGZvbnQtZmFtaWx5O1xuICAgIGZvbnQtc3R5bGU6ICAkZm9udC1zdHlsZTtcbiAgICBmb250LXdlaWdodDogJGZvbnQtd2VpZ2h0O1xufVxuXG5AbWl4aW4gZm9udC1zaXplKCRwc2QtZm9udC1zaXplLCAkcHNkLWxpbmUtaGVpZ2h0OiAkcHNkLWZvbnQtc2l6ZSkge1xuICAgIGZvbnQtc2l6ZTogJHBzZC1mb250LXNpemU7XG4gICAgbGluZS1oZWlnaHQ6ICgkcHNkLWxpbmUtaGVpZ2h0KS8kcHNkLWZvbnQtc2l6ZTtcbn1cblxuQG1peGluIGZvbnQtbGluZS1oZWlnaHQoJHBzZC1mb250LXNpemUsICRwc2QtbGluZS1oZWlnaHQ6ICRwc2QtZm9udC1zaXplKSB7XG4gICAgbGluZS1oZWlnaHQ6ICgkcHNkLWxpbmUtaGVpZ2h0KS8kcHNkLWZvbnQtc2l6ZTtcbn1cblxuQG1peGluIGZvbnQtc2l6ZS1tYXAoJGZzLW1hcCkge1xuICAgIEBlYWNoICRmcy1icmVha3BvaW50LCAkZnMtZm9udC1zaXplIGluICRmcy1tYXAge1xuICAgICAgICBAaWYgJGZzLWJyZWFrcG9pbnQgPT0gbnVsbCB7XG4gICAgICAgICAgICBmb250LXNpemU6ICRmcy1mb250LXNpemU7XG4gICAgICAgIH0gQGVsc2Uge1xuICAgICAgICAgICAgQGluY2x1ZGUgYnJlYWtwb2ludCgkZnMtYnJlYWtwb2ludCkge1xuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogJGZzLWZvbnQtc2l6ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuQG1peGluIGZvbnQtZmFjZSgkZm9udC1uYW1lLCAkZm9udC1maWxlbmFtZTogJGZvbnQtbmFtZSkge1xuICAgIEBmb250LWZhY2Uge1xuICAgICAgICBmb250LWZhbWlseTogJyN7JGZvbnQtbmFtZX0nO1xuICAgICAgICBAaWYgJGltZy1saW5rLXR5cGUgPT0gXCJIVE1MXCIge1xuICAgICAgICAgICAgc3JjOiB1cmwoJyN7JHJvdXRlSFRNTGZvbnQrJGZvbnQtZmlsZW5hbWV9LmVvdCcpO1xuICAgICAgICAgICAgc3JjOiB1cmwoJyN7JHJvdXRlSFRNTGZvbnQrJGZvbnQtZmlsZW5hbWV9LmVvdD8jaWVmaXgnKSBmb3JtYXQoJ2VtYmVkZGVkLW9wZW50eXBlJyksXG4gICAgICAgICAgICB1cmwoJyN7JHJvdXRlSFRNTGZvbnQrJGZvbnQtZmlsZW5hbWV9LndvZmYyJykgZm9ybWF0KCd3b2ZmMicpLFxuICAgICAgICAgICAgdXJsKCcjeyRyb3V0ZUhUTUxmb250KyRmb250LWZpbGVuYW1lfS53b2ZmJykgZm9ybWF0KCd3b2ZmJyksXG4gICAgICAgICAgICB1cmwoJyN7JHJvdXRlSFRNTGZvbnQrJGZvbnQtZmlsZW5hbWV9LnR0ZicpIGZvcm1hdCgndHJ1ZXR5cGUnKSxcbiAgICAgICAgICAgIHVybCgnI3skcm91dGVIVE1MZm9udCskZm9udC1maWxlbmFtZX0uc3ZnIyN7JGZvbnQtbmFtZX0nKSBmb3JtYXQoJ3N2ZycpO1xuICAgICAgICB9IEBlbHNlIGlmICRpbWctbGluay10eXBlID09IFwiUEhQXCIge1xuICAgICAgICAgICAgc3JjOiB1cmwoJyN7JHJvdXRlUEhQZm9udCskZm9udC1maWxlbmFtZX0uZW90Jyk7XG4gICAgICAgICAgICBzcmM6IHVybCgnI3skcm91dGVQSFBmb250KyRmb250LWZpbGVuYW1lfS5lb3Q/I2llZml4JykgZm9ybWF0KCdlbWJlZGRlZC1vcGVudHlwZScpLFxuICAgICAgICAgICAgdXJsKCcjeyRyb3V0ZVBIUGZvbnQrJGZvbnQtZmlsZW5hbWV9LndvZmYyJykgZm9ybWF0KCd3b2ZmMicpLFxuICAgICAgICAgICAgdXJsKCcjeyRyb3V0ZVBIUGZvbnQrJGZvbnQtZmlsZW5hbWV9LndvZmYnKSBmb3JtYXQoJ3dvZmYnKSxcbiAgICAgICAgICAgIHVybCgnI3skcm91dGVQSFBmb250KyRmb250LWZpbGVuYW1lfS50dGYnKSBmb3JtYXQoJ3RydWV0eXBlJyksXG4gICAgICAgICAgICB1cmwoJyN7JHJvdXRlUEhQZm9udCskZm9udC1maWxlbmFtZX0uc3ZnIyN7JGZvbnQtbmFtZX0nKSBmb3JtYXQoJ3N2ZycpO1xuICAgICAgICB9XG4gICAgICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gICAgICAgIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgICB9XG59XG4iLCIuY29udGFpbmVye1xuICAgIEBpbmNsdWRlIGNvbnRhaW5lcigpO1xufVxuaW5wdXRbdHlwZT1cInRleHRcIl0saW5wdXRbdHlwZT1cInBhc3N3b3JkXCJde1xuICAgIGJvcmRlci1ib3R0b206MXB4IHNvbGlkICRsZ3JleSAhaW1wb3J0YW50O1xuICAgIGhlaWdodDoyNXB4O1xufVxuaHRtbHtcbiAgICBmb250LXNpemU6MTBweDtcbn0iLCIvLyBDb250YWluZXIgU3ludGF4XG4vLyA9PT09PT09PT09PT09PT09XG5cbi8vIENvbnRhaW5lciBbbWl4aW5dXG4vLyAtLS0tLS0tLS0tLS0tLS0tLVxuLy8gU2V0IGEgY29udGFpbmVyIGVsZW1lbnRcbi8vIC0gWyRsYXlvdXRdICA6IDxzZXR0aW5ncz5cbkBtaXhpbiBjb250YWluZXIoXG4gICRsYXlvdXQ6ICRzdXN5XG4pIHtcbiAgJGluc3BlY3QgICAgOiAkbGF5b3V0O1xuICAkbGF5b3V0ICAgICA6IHBhcnNlLWdyaWQoJGxheW91dCk7XG5cbiAgJF93aWR0aCAgICAgOiBnZXQtY29udGFpbmVyLXdpZHRoKCRsYXlvdXQpO1xuICAkX2p1c3RpZnkgICA6IHBhcnNlLWNvbnRhaW5lci1wb3NpdGlvbihzdXN5LWdldChjb250YWluZXItcG9zaXRpb24sICRsYXlvdXQpKTtcbiAgJF9wcm9wZXJ0eSAgOiBpZihzdXN5LWdldChtYXRoLCAkbGF5b3V0KSA9PSBzdGF0aWMsIHdpZHRoLCBtYXgtd2lkdGgpO1xuXG4gICRfYm94ICAgICAgIDogc3VzeS1nZXQoYm94LXNpemluZywgJGxheW91dCk7XG5cbiAgQGlmICRfYm94IHtcbiAgICBAaW5jbHVkZSBvdXRwdXQoKGJveC1zaXppbmc6ICRfYm94KSk7XG4gIH1cblxuICBAaW5jbHVkZSBzdXN5LWluc3BlY3QoY29udGFpbmVyLCAkaW5zcGVjdCk7XG4gIEBpbmNsdWRlIGZsb2F0LWNvbnRhaW5lcigkX3dpZHRoLCAkX2p1c3RpZnksICRfcHJvcGVydHkpO1xuICBAaW5jbHVkZSBzaG93LWdyaWQoJGxheW91dCk7XG59XG5cbi8vIENvbnRhaW5lciBbZnVuY3Rpb25dXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUmV0dXJuIGNvbnRhaW5lciB3aWR0aFxuLy8gLSBbJGxheW91dF0gIDogPHNldHRpbmdzPlxuQGZ1bmN0aW9uIGNvbnRhaW5lcihcbiAgJGxheW91dDogJHN1c3lcbikge1xuICAkbGF5b3V0OiBwYXJzZS1ncmlkKCRsYXlvdXQpO1xuICBAcmV0dXJuIGdldC1jb250YWluZXItd2lkdGgoJGxheW91dCk7XG59XG5cbi8vIEdldCBDb250YWluZXIgV2lkdGhcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIENhbGN1bGF0ZSB0aGUgY29udGFpbmVyIHdpZHRoXG4vLyAtIFskbGF5b3V0XTogPHNldHRpbmdzPlxuQGZ1bmN0aW9uIGdldC1jb250YWluZXItd2lkdGgoXG4gICRsYXlvdXQ6ICRzdXN5XG4pIHtcbiAgJGxheW91dCAgICAgICAgIDogcGFyc2UtZ3JpZCgkbGF5b3V0KTtcbiAgJF93aWR0aCAgICAgICAgIDogc3VzeS1nZXQoY29udGFpbmVyLCAkbGF5b3V0KTtcbiAgJF9jb2x1bW4td2lkdGggIDogc3VzeS1nZXQoY29sdW1uLXdpZHRoLCAkbGF5b3V0KTtcbiAgJF9tYXRoICAgICAgICAgIDogc3VzeS1nZXQobWF0aCwgJGxheW91dCk7XG5cbiAgQGlmIG5vdCgkX3dpZHRoKSBvciAkX3dpZHRoID09IGF1dG8ge1xuICAgIEBpZiB2YWxpZC1jb2x1bW4tbWF0aCgkX21hdGgsICRfY29sdW1uLXdpZHRoKSB7XG4gICAgICAkX2NvbHVtbnMgICA6IHN1c3ktZ2V0KGNvbHVtbnMsICRsYXlvdXQpO1xuICAgICAgJF9ndXR0ZXJzICAgOiBzdXN5LWdldChndXR0ZXJzLCAkbGF5b3V0KTtcbiAgICAgICRfc3ByZWFkICAgIDogaWYoaXMtc3BsaXQoJGxheW91dCksIHdpZGUsIG5hcnJvdyk7XG4gICAgICAkX3dpZHRoICAgICA6IHN1c3ktc3VtKCRfY29sdW1ucywgJF9ndXR0ZXJzLCAkX3NwcmVhZCkgKiAkX2NvbHVtbi13aWR0aDtcbiAgICB9IEBlbHNlIHtcbiAgICAgICRfd2lkdGg6IDEwMCU7XG4gICAgfVxuICB9XG5cbiAgQHJldHVybiAkX3dpZHRoO1xufVxuXG4vLyBQYXJzZSBDb250YWluZXIgUG9zaXRpb25cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUGFyc2UgdGhlICRjb250YWluZXItcG9zaXRpb24gaW50byBtYXJnaW4gdmFsdWVzLlxuLy8gLSBbJGp1c3RpZnldICAgOiBsZWZ0IHwgY2VudGVyIHwgcmlnaHQgfCA8bGVuZ3RoPiBbPGxlbmd0aD5dXG5AZnVuY3Rpb24gcGFyc2UtY29udGFpbmVyLXBvc2l0aW9uKFxuICAkanVzdGlmeTogbWFwLWdldCgkc3VzeS1kZWZhdWx0cywgY29udGFpbmVyLXBvc2l0aW9uKVxuKSB7XG4gICRfcmV0dXJuOiBpZigkanVzdGlmeSA9PSBsZWZ0LCAwLCBhdXRvKSBpZigkanVzdGlmeSA9PSByaWdodCwgMCwgYXV0byk7XG5cbiAgQGlmIG5vdChpbmRleChsZWZ0IHJpZ2h0IGNlbnRlciwgJGp1c3RpZnkpKSB7XG4gICAgJF9yZXR1cm46IG50aCgkanVzdGlmeSwgMSk7XG4gICAgJF9yZXR1cm46ICRfcmV0dXJuIGlmKGxlbmd0aCgkanVzdGlmeSkgPiAxLCBudGgoJGp1c3RpZnksIDIpLCAkX3JldHVybik7XG4gIH1cblxuICBAcmV0dXJuICRfcmV0dXJuO1xufVxuIiwiLy8gU3VzeSBGYWxsYmFjayBDbGVhcmZpeFxuLy8gPT09PT09PT09PT09PT09PT09PT09PVxuXG5cbi8vIENsZWFyZml4XG4vLyAtLS0tLS0tLVxuLy8gQ2hlY2sgZm9yIGFuIGV4aXN0aW5nIHN1cHBvcnQgbWl4aW4sIG9yIHByb3ZpZGUgYSBzaW1wbGUgZmFsbGJhY2suXG5AbWl4aW4gc3VzeS1jbGVhcmZpeCB7XG4gIEBpZiBzdXN5LXN1cHBvcnQoY2xlYXJmaXgsIChtaXhpbjogY2xlYXJmaXgpKSB7XG4gICAgQGluY2x1ZGUgY2xlYXJmaXg7XG4gIH0gQGVsc2Uge1xuICAgICY6YWZ0ZXIge1xuICAgICAgY29udGVudDogXCIgXCI7XG4gICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgIGNsZWFyOiBib3RoO1xuICAgIH1cbiAgfVxufVxuIiwiLnNpZ251cHtcbiAgICBiYWNrZ3JvdW5kOiAkZGdyZXk7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICZfX2NvbnRhaW5lcntcbiAgICAgICAgQGluY2x1ZGUgc3BhbigxMiBvZiAyNCk7XG4gICAgICAgIG1hcmdpbi1sZWZ0OmF1dG87XG4gICAgICAgIG1hcmdpbi1yaWdodDphdXRvO1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIGxlZnQ6MDtcbiAgICAgICAgcmlnaHQ6MDtcbiAgICAgICAgdG9wOjUwJTtcbiAgICAgICAgdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTUwJSk7XG4gICAgICAgIGhlaWdodDogNjAwcHg7XG4gICAgICAgIGJhY2tncm91bmQ6d2hpdGU7XG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgfVxuICAgICZfX2RhdGF7XG4gICAgICAgIEBpbmNsdWRlIHNwYW4oNyBvZiAxMSk7XG4gICAgICAgIHBhZGRpbmc6c3BhbigzLzIgb2YgMTEpIHNwYW4oMSBvZiAxMSkgc3BhbigxIG9mIDExKTtcbiAgICAgICAgaDJ7XG4gICAgICAgICAgICBAZXh0ZW5kIC51YnVudHUtYjtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTozcmVtO1xuICAgICAgICB9XG4gICAgICAgIHB7XG4gICAgICAgICAgICBAZXh0ZW5kIC5yYWxlLXI7XG4gICAgICAgICAgICBmb250LXNpemU6MS4ycmVtO1xuICAgICAgICAgICAgbWFyZ2luLXRvcDogMTJweDtcbiAgICAgICAgfVxuICAgIH1cbiAgICAmX19zdWJtaXR7XG4gICAgICAgICY6aG92ZXJ7XG4gICAgICAgICAgICBjdXJzb3I6cG9pbnRlcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICAmX19jb3ZlcntcbiAgICAgICAgQGluY2x1ZGUgc3Bhbig0IG9mIDExKTtcbiAgICB9XG4gICAgJl9fc291cmNle1xuICAgICAgICB3aWR0aDphdXRvO1xuICAgICAgICBoZWlnaHQ6MTAwJTtcbiAgICAgICAgb2JqZWN0LWZpdDogY292ZXI7XG4gICAgfVxuICAgICZfX2lubmVye1xuICAgICAgICBtYXJnaW4tdG9wOiAyMHB4O1xuICAgIH1cbn0iLCIvL0JsYWNrXG4kYmxhY2stMTAwOiBcdHJnYmEoMCwwLDAsMSk7XG4kYmxhY2stOTA6IFx0XHRyZ2JhKDAsMCwwLDAuOSk7XG4kYmxhY2stODA6IFx0XHRyZ2JhKDAsMCwwLDAuOCk7XG4kYmxhY2stNzA6IFx0XHRyZ2JhKDAsMCwwLDAuNyk7XG4kYmxhY2stNjA6IFx0XHRyZ2JhKDAsMCwwLDAuNik7XG4kYmxhY2stNTA6IFx0XHRyZ2JhKDAsMCwwLDAuNSk7XG4kYmxhY2stNDA6IFx0XHRyZ2JhKDAsMCwwLDAuNCk7XG4kYmxhY2stMzA6IFx0XHRyZ2JhKDAsMCwwLDAuMyk7XG4kYmxhY2stMjA6IFx0XHRyZ2JhKDAsMCwwLDAuMik7XG4kYmxhY2stMTA6IFx0XHRyZ2JhKDAsMCwwLDAuMSk7XG4kYmxhY2stMDogXHRcdHJnYmEoMCwwLDAsMCk7XG5cbi8vV2hpdGVcbiR3aGl0ZS0xMDA6IFx0cmdiYSgyNTUsMjU1LDI1NSwxKTtcbiR3aGl0ZS05MDogXHRcdHJnYmEoMjU1LDI1NSwyNTUsMC45KTtcbiR3aGl0ZS04MDogXHRcdHJnYmEoMjU1LDI1NSwyNTUsMC44KTtcbiR3aGl0ZS03MDogXHRcdHJnYmEoMjU1LDI1NSwyNTUsMC43KTtcbiR3aGl0ZS02MDogXHRcdHJnYmEoMjU1LDI1NSwyNTUsMC42KTtcbiR3aGl0ZS01MDogXHRcdHJnYmEoMjU1LDI1NSwyNTUsMC41KTtcbiR3aGl0ZS00MDogXHRcdHJnYmEoMjU1LDI1NSwyNTUsMC40KTtcbiR3aGl0ZS0zMDogXHRcdHJnYmEoMjU1LDI1NSwyNTUsMC4zKTtcbiR3aGl0ZS0yMDogXHRcdHJnYmEoMjU1LDI1NSwyNTUsMC4yKTtcbiR3aGl0ZS0xMDogXHRcdHJnYmEoMjU1LDI1NSwyNTUsMC4xKTtcbiR3aGl0ZS0wOiBcdFx0cmdiYSgyNTUsMjU1LDI1NSwwKTtcblxuJGRncmV5OiMzNzM3Mzc7XG4kbGdyZXk6I2FiYWJhYjsiLCIucC1ob21le1xuICAgIGJhY2tncm91bmQ6d2hpdGU7XG4gICAgLm5hdmlnYXRpb257XG4gICAgICAgIEBpbmNsdWRlIHNwYW4oMjIgb2YgMjQpO1xuICAgICAgICBtYXJnaW4tbGVmdDphdXRvO1xuICAgICAgICBtYXJnaW4tcmlnaHQ6YXV0bztcbiAgICAgICAgcGFkZGluZy1sZWZ0OjA7XG4gICAgICAgIHBhZGRpbmctcmlnaHQ6MDtcbiAgICAgICAgZmxvYXQ6bm9uZTtcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICB0b3A6MzBweDtcbiAgICAgICAgaGVpZ2h0OjUwcHg7XG4gICAgfVxuICAgIC5jb3ZlcntcbiAgICAgICAgQGluY2x1ZGUgc3BhbigyMiBvZiAyNCk7XG4gICAgICAgIG1hcmdpbi1sZWZ0OmF1dG87XG4gICAgICAgIG1hcmdpbi1yaWdodDphdXRvO1xuICAgICAgICBwYWRkaW5nLWxlZnQ6MDtcbiAgICAgICAgcGFkZGluZy1yaWdodDowO1xuICAgICAgICBmbG9hdDpub25lO1xuICAgICAgICBsZWZ0OjA7XG4gICAgICAgIHJpZ2h0OjA7XG4gICAgICAgIGhlaWdodDpjYWxjKDEwMHZoIC0gMTAwcHgpO1xuICAgICAgICB0b3A6NTBweDtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOnVybChcIi4uLy4uL3N0YXRpYy9pbWcvY292ZXIuanBnXCIpO1xuICAgICAgICBiYWNrZ3JvdW5kLXNpemU6YXV0byAxMDAlO1xuICAgICAgICBoMXtcbiAgICAgICAgICAgIEBleHRlbmQgLnJhbGUtcjtcbiAgICAgICAgICAgIGNvbG9yOndoaXRlO1xuICAgICAgICAgICAgQGluY2x1ZGUgc3BhbigxMSBvZiAyNCk7XG4gICAgICAgICAgICBAaW5jbHVkZSBmb250LXNpemUoNC41cmVtLDUuNXJlbSk7XG4gICAgICAgICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgICAgICAgICAgbGV0dGVyLXNwYWNpbmc6IDAuMnJlbTtcbiAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICAgIGJvdHRvbTpzcGFuKDMgb2YgMjQpO1xuICAgICAgICAgICAgbGVmdDpzcGFuKDMgb2YgMjQpO1xuICAgICAgICB9XG4gICAgfVxufSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ== */
